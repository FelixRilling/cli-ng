var clingy=function(e){"use strict";const n=(e,n)=>e instanceof n,t=(e,n)=>typeof e===n,s=e=>null==e,i=(e,n)=>{Object.entries(e).forEach((t,s)=>{n(t[0],t[1],s,e)})},o=e=>n(e,Map),r=e=>!s(e)&&(t(e,"object")||t(e,"function")),u=e=>r(e)&&e.constructor===Object,a=(e,n)=>{if(0===e.length)return n.length;if(0===n.length)return e.length;const t=[];for(let e=0;e<=n.length;e++)t[e]=[e];for(let n=0;n<=e.length;n++)t[0][n]=n;for(let s=1;s<=n.length;s++){const i=t[s],o=t[s-1];for(let t=1;t<=e.length;t++)if(n.charAt(s-1)===e.charAt(t-1))i[t]=o[t-1];else{const e=o[t-1]+1,n=i[t-1]+1,s=o[t]+1;i[t]=Math.min(e,n,s)}}return t[n.length][e.length]},g=e=>e.filter(e=>e),l=(e,n)=>{const t=new Map;e.forEach((i,o)=>{const r=n(i,o,e);s(r)||t.set(r,t.has(r)?[...t.get(r),i]:[i])});return t},c=(e,n,t=!1)=>{const s=l(n,n=>a(e,n));return t?s:s.get(Math.min(...s.keys()))},h=e=>{if(o(e))return Array.from(e.entries());if(r(e))return Array.from(Object.entries(e));return null};class f extends Map{constructor(e){super(h(e))}static createWithOptions(e,n){return o(e)?e.forEach(e=>f.createWithOptionsHelper(e,n)):u(e)&&i(e,(e,t)=>f.createWithOptionsHelper(t,n)),new f(e)}static createWithOptionsHelper(e,n){(u(e.sub)||o(e.sub))&&(e.sub=new M(f.createWithOptions(e.sub,n),n))}hasIgnoreCase(e){return Array.from(this.keys()).map(e=>e.toLowerCase()).includes(e.toLowerCase())}getIgnoreCase(e){let n=null;return this.forEach((t,s)=>{e.toLowerCase()===s.toLowerCase()&&(n=t)}),n}}const p={NONE:{val:-1},ERROR:{name:"ERROR",val:0},WARN:{name:"WARN",val:1},INFO:{name:"INFO",val:2},DEBUG:{name:"DEBUG",val:3},TRACE:{name:"TRACE",val:4}},m=(e,n,t)=>{let s=console.log;e===p.ERROR?s=console.error:e===p.WARN?s=console.warn:e===p.INFO&&(s=console.info);s(`${(new Date).toISOString()} ${e.name} ${n}`,...t)},d=(e,n)=>typeof e===n,b=e=>null==e,w=e=>d(e,"string"),v=e=>!b(e)&&(d(e,"object")||d(e,"function"));class A{constructor(e,n){this.root=e,this.name=n}log(e,...n){this.root.getLevel().val>=e.val&&this.root.getAppenders().forEach(t=>t(e,this.name,n))}error(...e){this.log(p.ERROR,...e)}warn(...e){this.log(p.WARN,...e)}info(...e){this.log(p.INFO,...e)}debug(...e){this.log(p.DEBUG,...e)}trace(...e){this.log(p.TRACE,...e)}}class R{constructor(){this.loggers=new Map,this.appenders=new Map([["defaultAppender",m]]),this.level=p.INFO}getLogger(e){let n;if(v(e)&&"name"in e)n=e.name;else{if(!w(e))throw new TypeError(`'${e}' is neither an INameable nor a string.`);n=e}if(this.loggers.has(n))return this.loggers.get(n);const t=new A(this,n);return this.loggers.set(n,t),t}getLevel(){return this.level}setLevel(e){this.level=e}attachAppender(e,n){this.appenders.set(e,n)}detachAppender(e){this.appenders.delete(e)}getAppenders(){return this.appenders}}const E=new R;class y{constructor(e,n){this.missing=[],this.result=new Map,y.logger.debug("Matching arguments:",e,n),e.forEach((e,t)=>{if(t<n.length){const s=n[t];y.logger.trace(`Found matching argument for ${e.name}, adding to result: ${s}`),this.result.set(e.name,s)}else e.required||s(e.defaultValue)?(y.logger.trace(`No matching argument found for ${e.name}, adding to missing.`),this.missing.push(e)):(y.logger.trace(`No matching argument found for ${e.name}, using default: ${e.defaultValue}`),this.result.set(e.name,e.defaultValue))}),y.logger.debug(`Finished matching arguments: ${e.length} expected, ${this.result.size} found and ${this.missing.length} missing.`)}}y.logger=E.getLogger(y);const O=(e,n)=>c(n,Array.from(e.keys()),!1);class N{constructor(e=!0){this.caseSensitive=e}resolve(e,n,t=!1){if(0===n.length)throw new Error("Path cannot be empty.");return this.resolveInternal(e,n,[],t)}resolveInternal(e,t,i,o){const r=t[0],u=t.slice(1);if(i.push(r),this.caseSensitive?!e.has(r):!e.hasIgnoreCase(r))return N.logger.warn(`Command '${r}' could not be found.`),{successful:!1,pathUsed:i,pathDangling:u,type:1,missing:r,similar:O(e,r)};const a=this.caseSensitive?e.get(r):e.getIgnoreCase(r);if(N.logger.debug(`Successfully looked up command: ${r}`),u.length>0&&n(a.sub,M))return N.logger.debug("Resolving sub-commands:",a.sub,u),this.resolveInternal(a.sub.mapAliased,u,i,o);let g;if(!o||s(a.args)||0===a.args.length)N.logger.debug("No arguments defined, using empty array."),g=new Map;else{N.logger.debug(`Looking up arguments: ${u}`);const e=new y(a.args,u);if(e.missing.length>0)return N.logger.warn("Some arguments could not be found:",e.missing),{successful:!1,pathUsed:i,pathDangling:u,type:2,missing:e.missing};g=e.result,N.logger.debug("Successfully looked up arguments:",g)}const l={successful:!0,pathUsed:i,pathDangling:u,type:0,command:a,args:g};return N.logger.debug("Returning successful lookup result:",l),l}}N.logger=E.getLogger(N);class C{constructor(e=['"']){this.legalQuotes=e,this.pattern=this.generateMatcher()}parse(e){C.logger.debug(`Parsing input '${e}'`);const n=[],t=new RegExp(this.pattern);let s;for(;s=t.exec(e);){C.logger.trace(`Found match '${s}'`);const e=g(s.slice(1));e.length>0&&(C.logger.trace(`Found group '${e[0]}'`),n.push(e[0]))}return n}generateMatcher(){C.logger.debug("Creating matcher.");const e=this.legalQuotes.map(e=>`\\${e}`).map(e=>`${e}(.+?)${e}`);e.push("(\\S+)");let n;try{n=new RegExp(e.join("|"),"g")}catch(e){throw C.logger.error("The parsing pattern is invalid, this should never happen.",e),e}return n}}C.logger=E.getLogger(C);class M{constructor(e={},n={}){this.lookupResolver=new N(n.caseSensitive),this.inputParser=new C(n.legalQuotes),this.map=f.createWithOptions(e,n),this.mapAliased=new f,this.updateAliases()}setCommand(e,n){this.map.set(e,n),this.updateAliases()}getCommand(e){return this.mapAliased.get(e)}hasCommand(e){return this.mapAliased.has(e)}hasPath(e){return this.getPath(e).successful}getPath(e){return M.logger.debug(`Resolving pathUsed: ${e}`),this.lookupResolver.resolve(this.mapAliased,e)}parse(e){return M.logger.debug(`Parsing input: '${e}'`),this.lookupResolver.resolve(this.mapAliased,this.inputParser.parse(e),!0)}updateAliases(){M.logger.debug("Updating aliased map."),this.mapAliased.clear(),this.map.forEach((e,n)=>{this.mapAliased.set(n,e);e.alias.forEach(t=>{this.mapAliased.has(t)?M.logger.warn(`Alias '${t}' conflicts with a previously defined key, will be ignored.`):(M.logger.trace(`Created alias '${t}' for '${n}'`),this.mapAliased.set(t,e))})}),M.logger.debug("Done updating aliased map.")}}return M.logger=E.getLogger(M),e.Clingy=M,e.clingyLogby=E,e}({});
//# sourceMappingURL=clingy.min.js.map
