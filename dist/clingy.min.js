var clingy=function(e){"use strict";const n=(e,n)=>e instanceof n,t=(e,n)=>typeof e===n,s=e=>null==e,i=e=>n(e,Map),o=e=>!s(e)&&(t(e,"object")||t(e,"function")),r=(e,n)=>{if(0===e.length)return n.length;if(0===n.length)return e.length;const t=[];for(let e=0;e<=n.length;e++)t[e]=[e];for(let n=0;n<=e.length;n++)t[0][n]=n;for(let s=1;s<=n.length;s++){const i=t[s],o=t[s-1];for(let t=1;t<=e.length;t++)if(n.charAt(s-1)===e.charAt(t-1))i[t]=o[t-1];else{const e=o[t-1]+1,n=i[t-1]+1,s=o[t]+1;i[t]=Math.min(e,n,s)}}return t[n.length][e.length]},a=e=>e.filter(e=>e),g=(e,n)=>{const t=new Map;e.forEach((i,o)=>{const r=n(i,o,e);s(r)||t.set(r,t.has(r)?[...t.get(r),i]:[i])});return t},u=(e,n,t=!1)=>{const s=g(n,n=>r(e,n));return t?s:s.get(Math.min(...s.keys()))},l=e=>{if(i(e))return Array.from(e.entries());if(o(e))return Array.from(Object.entries(e));return null};class c extends Map{constructor(e){super(l(e))}hasIgnoreCase(e){return Array.from(this.keys()).map(e=>e.toLowerCase()).includes(e.toLowerCase())}getIgnoreCase(e){let n=null;return this.forEach((t,s)=>{e.toLowerCase()===s.toLowerCase()&&(n=t)}),n}}const h={NONE:{val:-1},ERROR:{name:"ERROR",val:0},WARN:{name:"WARN",val:1},INFO:{name:"INFO",val:2},DEBUG:{name:"DEBUG",val:3},TRACE:{name:"TRACE",val:4}},f=(e,n)=>typeof e===n,p=e=>null==e,m=e=>f(e,"string"),d=e=>!p(e)&&(f(e,"object")||f(e,"function")),w=(e,n,t)=>{const s=`${(new Date).toISOString()} ${e.name} ${n}`;let i=console.log;e===h.ERROR?i=console.error:e===h.WARN?i=console.warn:e===h.INFO&&(i=console.info);i(s,...t)};class A{constructor(e,n){this.root=e,this.name=n}log(e,...n){this.root.level.val>=e.val&&this.root.appenderQueue.forEach(t=>t(e,this.name,n))}error(...e){this.log(h.ERROR,...e)}warn(...e){this.log(h.WARN,...e)}info(...e){this.log(h.INFO,...e)}debug(...e){this.log(h.DEBUG,...e)}trace(...e){this.log(h.TRACE,...e)}}class R{constructor(e=h.INFO){this.loggerMap=new Map,this.level=e,this.appenderQueue=[w]}getLogger(e){let n;if(d(e)&&"name"in e)n=e.name;else{if(!m(e))throw new TypeError(`'${e}' is neither an INameable nor a string.`);n=e}if(this.loggerMap.has(n))return this.loggerMap.get(n);const t=new A(this,n);return this.loggerMap.set(n,t),t}}const v=new R;class b{constructor(e,n){this.missing=[],this.result=new Map,b.logger.debug(`Matching arguments ${e} with ${n}`),e.forEach((e,t)=>{if(t<n.length){const s=n[t];b.logger.trace(`Found matching argument for ${e.name}, adding to result: ${s}`),this.result.set(e.name,s)}else e.required||s(e.defaultValue)?(b.logger.trace(`No matching argument found for ${e.name}, adding to missing.`),this.missing.push(e)):(b.logger.trace(`No matching argument found for ${e.name}, using default: ${e.defaultValue}`),this.result.set(e.name,e.defaultValue))}),b.logger.debug(`Finished matching arguments: ${e.length} expected, ${this.result.size} found and ${this.missing.length} missing.`)}}b.logger=v.getLogger(b);const E=(e,n)=>u(n,Array.from(e.keys()),!1);class y{constructor(e=!0){this.caseSensitive=e}resolve(e,n,t=!1){if(0===n.length)throw new Error("Path cannot be empty.");return this.resolveInternal(e,n,[],t)}resolveInternal(e,n,t,i){const o=n[0],r=n.slice(1);if(t.push(o),this.caseSensitive?!e.has(o):!e.hasIgnoreCase(o))return y.logger.warn(`Command '${o}' could not be found.`),{successful:!1,pathUsed:t,pathDangling:r,type:1,missing:o,similar:E(e,o)};const a=this.caseSensitive?e.get(o):e.getIgnoreCase(o);if(y.logger.debug(`Successfully looked up command: ${o}`),r.length>0&&!s(a.sub))return y.logger.debug(`Resolving sub-commands: ${a.sub} ${r}`),this.resolveInternal(a.sub.mapAliased,r,t,i);let g;if(!i||s(a.args)||0===a.args.length)y.logger.debug("No arguments defined, using empty list."),g=new Map;else{y.logger.debug(`Looking up arguments: ${r}`);const e=new b(a.args,r);if(e.missing.length>0)return y.logger.warn(`Some arguments could not be found: ${e.missing.map(e=>e.name)}`),{successful:!1,pathUsed:t,pathDangling:r,type:2,missing:e.missing};g=e.result,y.logger.debug(`Successfully looked up arguments: ${g}`)}const u={successful:!0,pathUsed:t,pathDangling:r,type:0,command:a,args:g};return y.logger.debug(`Returning successful lookup result: ${u}`),u}}y.logger=v.getLogger(y);class M{constructor(e=['"']){this.legalQuotes=e,this.pattern=this.generateMatcher()}parse(e){M.logger.debug(`Parsing input '${e}'`);const n=[],t=new RegExp(this.pattern);let s;for(;s=t.exec(e);){M.logger.trace(`Found match '${s}'`);const e=a(s.slice(1));e.length>0&&(M.logger.trace(`Found group '${e[0]}'`),n.push(e[0]))}return n}generateMatcher(){M.logger.debug("Creating matcher.");const e=this.legalQuotes.map(e=>`\\${e}`).map(e=>`${e}(.+?)${e}`);e.push("(\\S+)");let n;try{n=new RegExp(e.join("|"),"g")}catch(e){throw M.logger.error("The parsing pattern is invalid, this should never happen.",e),e}return n}}M.logger=v.getLogger(M);class N{constructor(e={},n={}){this.lookupResolver=new y(n.caseSensitive),this.inputParser=new M(n.legalQuotes),this.map=new c(e),this.mapAliased=new c,this.updateAliases()}setCommand(e,n){this.map.set(e,n),this.updateAliases()}getCommand(e){return this.mapAliased.get(e)}hasCommand(e){return this.mapAliased.has(e)}hasPath(e){return this.getPath(e).successful}getPath(e){return N.logger.debug(`Resolving pathUsed: ${e}`),this.lookupResolver.resolve(this.mapAliased,e)}parse(e){return N.logger.debug(`Parsing input: '${e}'`),this.lookupResolver.resolve(this.mapAliased,this.inputParser.parse(e),!0)}updateAliases(){N.logger.debug("Updating aliased map."),this.mapAliased.clear(),this.map.forEach((e,n)=>{this.mapAliased.set(n,e);e.alias.forEach(t=>{this.mapAliased.has(t)?N.logger.warn(`Alias '${t}' conflicts with a previously defined key, will be ignored.`):(N.logger.trace(`Created alias '${t}' for '${n}'`),this.mapAliased.set(t,e))})}),N.logger.debug("Done updating aliased map.")}}return N.logger=v.getLogger(N),e.Clingy=N,e.clingyLoggerRoot=v,e}({});
//# sourceMappingURL=clingy.min.js.map
