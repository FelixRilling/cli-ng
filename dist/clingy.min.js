var clingy=function(e){"use strict";const t=(e,t)=>e instanceof t,n=(e,t)=>typeof e===t,s=e=>null==e,i=(e,t)=>{Object.entries(e).forEach((n,s)=>{t(n[0],n[1],s,e)})},o=e=>t(e,Map),r=e=>!s(e)&&(n(e,"object")||n(e,"function")),a=e=>r(e)&&e.constructor===Object,u=(e,t)=>{if(0===e.length)return t.length;if(0===t.length)return e.length;const n=[];for(let e=0;e<=t.length;e++)n[e]=[e];for(let t=0;t<=e.length;t++)n[0][t]=t;for(let s=1;s<=t.length;s++){const i=n[s],o=n[s-1];for(let n=1;n<=e.length;n++)if(t.charAt(s-1)===e.charAt(n-1))i[n]=o[n-1];else{const e=o[n-1]+1,t=i[n-1]+1,s=o[n]+1;i[n]=Math.min(e,t,s)}}return n[t.length][e.length]},g=e=>e.filter(e=>e),l=(e,t)=>{const n=new Map;e.forEach((i,o)=>{const r=t(i,o,e);s(r)||n.set(r,n.has(r)?[...n.get(r),i]:[i])});return n},c=(e,t,n=!1)=>{const s=l(t,t=>u(e,t));return n?s:s.get(Math.min(...s.keys()))},h=e=>{if(o(e))return Array.from(e.entries());if(r(e))return Array.from(Object.entries(e));return null};class f extends Map{constructor(e){super(h(e))}static createWithOptions(e,t){return o(e)?e.forEach(e=>f.createWithOptionsHelper(e,t)):a(e)&&i(e,(e,n)=>f.createWithOptionsHelper(n,t)),new f(e)}static createWithOptionsHelper(e,t){(a(e.sub)||o(e.sub))&&(e.sub=new I(f.createWithOptions(e.sub,t),t))}hasIgnoreCase(e){return Array.from(this.keys()).map(e=>e.toLowerCase()).includes(e.toLowerCase())}getIgnoreCase(e){let t=null;return this.forEach((n,s)=>{e.toLowerCase()===s.toLowerCase()&&(t=n)}),t}}const p={NONE:{val:-1},ERROR:{name:"ERROR",val:0},WARN:{name:"WARN",val:1},INFO:{name:"INFO",val:2},DEBUG:{name:"DEBUG",val:3},TRACE:{name:"TRACE",val:4}},m=(e,t,n)=>{let s=console.log;e===p.ERROR?s=console.error:e===p.WARN?s=console.warn:e===p.INFO&&(s=console.info);s(`${(new Date).toISOString()} ${e.name} ${t}`,...n)},d=(e,t)=>typeof e===t,w=e=>null==e,b=e=>d(e,"string"),A=e=>!w(e)&&(d(e,"object")||d(e,"function"));class v{constructor(e,t){this.root=e,this.name=t}log(e,...t){this.root.getLevel().val>=e.val&&this.root.getAppenders().forEach(n=>n(e,this.name,t))}error(...e){this.log(p.ERROR,...e)}warn(...e){this.log(p.WARN,...e)}info(...e){this.log(p.INFO,...e)}debug(...e){this.log(p.DEBUG,...e)}trace(...e){this.log(p.TRACE,...e)}}class R{constructor(){this.loggers=new Map,this.appenders=new Map([["defaultAppender",m]]),this.level=p.INFO}getLogger(e){let t;if(A(e)&&"name"in e)t=e.name;else{if(!b(e))throw new TypeError(`'${e}' is neither an INameable nor a string.`);t=e}if(this.loggers.has(t))return this.loggers.get(t);const n=new v(this,t);return this.loggers.set(t,n),n}getLevel(){return this.level}setLevel(e){this.level=e}attachAppender(e,t){this.appenders.set(e,t)}detachAppender(e){this.appenders.delete(e)}getAppenders(){return this.appenders}}const E=new R;class y{constructor(e,t){this.missing=[],this.result=new Map,y.logger.debug(`Matching arguments ${e} with ${t}`),e.forEach((e,n)=>{if(n<t.length){const s=t[n];y.logger.trace(`Found matching argument for ${e.name}, adding to result: ${s}`),this.result.set(e.name,s)}else e.required||s(e.defaultValue)?(y.logger.trace(`No matching argument found for ${e.name}, adding to missing.`),this.missing.push(e)):(y.logger.trace(`No matching argument found for ${e.name}, using default: ${e.defaultValue}`),this.result.set(e.name,e.defaultValue))}),y.logger.debug(`Finished matching arguments: ${e.length} expected, ${this.result.size} found and ${this.missing.length} missing.`)}}y.logger=E.getLogger(y);const O=(e,t)=>c(t,Array.from(e.keys()),!1);class N{constructor(e=!0){this.caseSensitive=e}resolve(e,t,n=!1){if(0===t.length)throw new Error("Path cannot be empty.");return this.resolveInternal(e,t,[],n)}resolveInternal(e,n,i,o){const r=n[0],a=n.slice(1);if(i.push(r),this.caseSensitive?!e.has(r):!e.hasIgnoreCase(r))return N.logger.warn(`Command '${r}' could not be found.`),{successful:!1,pathUsed:i,pathDangling:a,type:1,missing:r,similar:O(e,r)};const u=this.caseSensitive?e.get(r):e.getIgnoreCase(r);if(N.logger.debug(`Successfully looked up command: ${r}`),a.length>0&&t(u.sub,I))return N.logger.debug(`Resolving sub-commands: ${u.sub} ${a}`),this.resolveInternal(u.sub.mapAliased,a,i,o);let g;if(!o||s(u.args)||0===u.args.length)N.logger.debug("No arguments defined, using empty list."),g=new Map;else{N.logger.debug(`Looking up arguments: ${a}`);const e=new y(u.args,a);if(e.missing.length>0)return N.logger.warn(`Some arguments could not be found: ${e.missing.map(e=>e.name)}`),{successful:!1,pathUsed:i,pathDangling:a,type:2,missing:e.missing};g=e.result,N.logger.debug(`Successfully looked up arguments: ${g}`)}const l={successful:!0,pathUsed:i,pathDangling:a,type:0,command:u,args:g};return N.logger.debug(`Returning successful lookup result: ${l}`),l}}N.logger=E.getLogger(N);class C{constructor(e=['"']){this.legalQuotes=e,this.pattern=this.generateMatcher()}parse(e){C.logger.debug(`Parsing input '${e}'`);const t=[],n=new RegExp(this.pattern);let s;for(;s=n.exec(e);){C.logger.trace(`Found match '${s}'`);const e=g(s.slice(1));e.length>0&&(C.logger.trace(`Found group '${e[0]}'`),t.push(e[0]))}return t}generateMatcher(){C.logger.debug("Creating matcher.");const e=this.legalQuotes.map(e=>`\\${e}`).map(e=>`${e}(.+?)${e}`);e.push("(\\S+)");let t;try{t=new RegExp(e.join("|"),"g")}catch(e){throw C.logger.error("The parsing pattern is invalid, this should never happen.",e),e}return t}}C.logger=E.getLogger(C);class I{constructor(e={},t={}){this.lookupResolver=new N(t.caseSensitive),this.inputParser=new C(t.legalQuotes),this.map=f.createWithOptions(e,t),this.mapAliased=new f,this.updateAliases()}setCommand(e,t){this.map.set(e,t),this.updateAliases()}getCommand(e){return this.mapAliased.get(e)}hasCommand(e){return this.mapAliased.has(e)}hasPath(e){return this.getPath(e).successful}getPath(e){return I.logger.debug(`Resolving pathUsed: ${e}`),this.lookupResolver.resolve(this.mapAliased,e)}parse(e){return I.logger.debug(`Parsing input: '${e}'`),this.lookupResolver.resolve(this.mapAliased,this.inputParser.parse(e),!0)}updateAliases(){I.logger.debug("Updating aliased map."),this.mapAliased.clear(),this.map.forEach((e,t)=>{this.mapAliased.set(t,e);e.alias.forEach(n=>{this.mapAliased.has(n)?I.logger.warn(`Alias '${n}' conflicts with a previously defined key, will be ignored.`):(I.logger.trace(`Created alias '${n}' for '${t}'`),this.mapAliased.set(n,e))})}),I.logger.debug("Done updating aliased map.")}}return I.logger=E.getLogger(I),e.Clingy=I,e.clingyLogby=E,e}({});
//# sourceMappingURL=clingy.min.js.map
