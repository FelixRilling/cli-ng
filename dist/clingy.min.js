var clingy=function(t){"use strict";const e=(t,e)=>t instanceof e,n=t=>null==t,s=(t,e)=>typeof t===e,i=t=>s(t,"string"),r=t=>e(t,Map),o=t=>!n(t)&&(s(t,"object")||s(t,"function")),a=(t,e)=>{if(0===t.length)return e.length;if(0===e.length)return t.length;const n=[];for(let t=0;t<=e.length;t++)n[t]=[t];for(let e=0;e<=t.length;e++)n[0][e]=e;for(let s=1;s<=e.length;s++){const i=n[s],r=n[s-1];for(let n=1;n<=t.length;n++)if(e.charAt(s-1)===t.charAt(n-1))i[n]=r[n-1];else{const t=r[n-1]+1,e=i[n-1]+1,s=r[n]+1;i[n]=Math.min(t,e,s)}}return n[e.length][t.length]},g=t=>t.filter(t=>t),u=(t,e)=>{const s=new Map;t.forEach((i,r)=>{const o=e(i,r,t);n(o)||s.set(o,s.has(o)?[...s.get(o),i]:[i])});return s},l=(t,e,n=!1)=>{const s=u(e,e=>a(t,e));return n?s:s.get(Math.min(...s.keys()))},h=t=>{if(r(t))return Array.from(t.entries());if(o(t))return Array.from(Object.entries(t));return null};class c extends Map{constructor(t){super(h(t))}hasIgnoreCase(t){return Array.from(this.keys()).map(t=>t.toLowerCase()).includes(t.toLowerCase())}getIgnoreCase(t){let e=null;return this.forEach((n,s)=>{t.toLowerCase()===s.toLowerCase()&&(e=n)}),e}}const f={NONE:{val:-1},ERROR:{val:0,name:"ERROR"},WARN:{val:1,name:"WARN"},INFO:{val:2,name:"INFO"},DEBUG:{val:3,name:"DEBUG"},TRACE:{val:4,name:"TRACE"}};class p{constructor(t,e){this.root=t,this.name=e}log(t,...e){this.root.level.val>=t.val&&this.root.outFn(`${(new Date).toISOString()} ${t.name} ${this.name} - ${e[0]}`,...e.slice(1))}error(...t){this.log(f.ERROR,t)}warn(...t){this.log(f.WARN,t)}info(...t){this.log(f.INFO,t)}debug(...t){this.log(f.DEBUG,t)}trace(...t){this.log(f.TRACE,t)}}class m{constructor(t=f.INFO,e=console.log){this.loggerMap=new Map,this.level=t,this.outFn=e}getLogger(t){let e;if("name"in t)e=t.name;else{if(!i(t))throw new TypeError(`'${t}' is neither an INameable nor a string.`);e=t}if(this.loggerMap.has(e))return this.loggerMap.get(e);const n=new p(this,e);return this.loggerMap.set(e,n),n}}const d=new m;class w{constructor(t,e){this.missing=[],this.result=new Map;const s=d.getLogger(w);s.debug(`Matching arguments ${t} with ${e}`),t.forEach((t,i)=>{if(i<e.length){const n=e[i];s.trace(`Found matching argument for ${t.name}, adding to result: ${n}`),this.result.set(t.name,n)}else t.required||n(t.defaultValue)?(s.trace(`No matching argument found for ${t.name}, adding to missing.`),this.missing.push(t)):(s.trace(`No matching argument found for ${t.name}, using default: ${t.defaultValue}`),this.result.set(t.name,t.defaultValue))}),s.debug(`Finished matching arguments: ${t.length} expected, ${this.result.size} found and ${this.missing.length} missing.`)}}const A=(t,e)=>l(e,Array.from(t.keys()),!1);class v{constructor(t=!0){this.logger=d.getLogger(v),this.caseSensitive=t}resolve(t,e,n=!1){if(0===e.length)throw new Error("Path cannot be empty.");return this.resolveInternal(t,e,[],n)}resolveInternal(t,e,s,i){const r=e[0],o=e.slice(1);if(s.push(r),this.caseSensitive?!t.has(r):!t.hasIgnoreCase(r))return this.logger.warn(`Command '${r}' could not be found.`),{successful:!1,pathUsed:s,pathDangling:o,type:1,missing:r,similar:A(t,r)};const a=this.caseSensitive?t.get(r):t.getIgnoreCase(r);if(this.logger.debug(`Successfully looked up command: ${r}`),o.length>0&&!n(a.sub))return this.logger.debug(`Resolving sub-commands: ${a.sub} ${o}`),this.resolveInternal(a.sub.mapAliased,o,s,i);let g;if(!i||n(a.args)||0===a.args.length)this.logger.debug("No arguments defined, using empty list."),g=new Map;else{this.logger.debug(`Looking up arguments: ${o}`);const t=new w(a.args,o);if(t.missing.length>0)return this.logger.warn(`Some arguments could not be found: ${t.missing.map(t=>t.name)}`),{successful:!1,pathUsed:s,pathDangling:o,type:2,missing:t.missing};g=t.result,this.logger.debug(`Successfully looked up arguments: ${g}`)}const u={successful:!0,pathUsed:s,pathDangling:o,type:0,command:a,args:g};return this.logger.debug(`Returning successful lookup result: ${u}`),u}}class R{constructor(t=['"']){this.logger=d.getLogger(R),this.legalQuotes=t,this.pattern=this.generateMatcher()}parse(t){this.logger.debug(`Parsing input '${t}'`);const e=[],n=new RegExp(this.pattern);let s;for(;s=n.exec(t);){this.logger.trace(`Found match '${s}'`);const t=g(s.slice(1));t.length>0&&(this.logger.trace(`Found group '${t[0]}'`),e.push(t[0]))}return e}generateMatcher(){this.logger.debug("Creating matcher.");const t=this.legalQuotes.map(t=>`\\${t}`).map(t=>`${t}(.+?)${t}`);t.push("(\\S+)");let e;try{e=new RegExp(t.join("|"),"g")}catch(t){throw this.logger.error("The parsing pattern is invalid, this should never happen.",t),t}return e}}class b{constructor(t=new Map,e=!0,n=['"']){this.loggerRoot=d,this.logger=d.getLogger(b),this.lookupResolver=new v(e),this.inputParser=new R(n),this.map=new c(t),this.mapAliased=new c,this.updateAliases()}setCommand(t,e){this.map.set(t,e),this.updateAliases()}getCommand(t){return this.mapAliased.get(t)}hasCommand(t){return this.mapAliased.has(t)}hasPath(t){return this.getPath(t).successful}getPath(t){return this.logger.debug(`Resolving pathUsed: ${t}`),this.lookupResolver.resolve(this.mapAliased,t)}parse(t){return this.logger.debug(`Parsing input: '${t}'`),this.lookupResolver.resolve(this.mapAliased,this.inputParser.parse(t),!0)}updateAliases(){this.logger.debug("Updating aliased map."),this.mapAliased.clear(),this.map.forEach((t,e)=>{this.mapAliased.set(e,t);t.alias.forEach(n=>{this.mapAliased.has(n)?this.logger.warn(`Alias '${n}' conflicts with a previously defined key, will be ignored.`):(this.logger.trace(`Created alias '${n}' for '${e}'`),this.mapAliased.set(n,t))})}),this.logger.debug("Done updating aliased map.")}}return t.Clingy=b,t}({});
//# sourceMappingURL=clingy.min.js.map
