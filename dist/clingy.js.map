{"version":3,"file":"clingy.js","sources":["esm/src/lookup/CaseSensitivity.js","esm/src/command/CommandMap.js","../node_modules/logby/node_modules/lightdash/dist/lightdash.esm.js","../node_modules/logby/dist/logby.esm.js","esm/src/logger.js","esm/src/lookup/ArgumentResolving.js","esm/src/argument/ArgumentMatcher.js","../node_modules/lightdash/dist/lightdash.esm.js","esm/src/command/util/commandUtil.js","esm/src/lookup/result/ILookupResult.js","esm/src/lookup/LookupResolver.js","esm/src/parser/InputParser.js","esm/src/Clingy.js"],"sourcesContent":["var CaseSensitivity;\n(function (CaseSensitivity) {\n    CaseSensitivity[CaseSensitivity[\"SENSITIVE\"] = 0] = \"SENSITIVE\";\n    CaseSensitivity[CaseSensitivity[\"INSENSITIVE\"] = 1] = \"INSENSITIVE\";\n})(CaseSensitivity || (CaseSensitivity = {}));\nexport { CaseSensitivity };\n//# sourceMappingURL=CaseSensitivity.js.map","import { forEach, isMap, isObject, isPlainObject } from \"lodash\";\nimport { Clingy } from \"../Clingy\";\nimport { CaseSensitivity } from \"../lookup/CaseSensitivity\";\n/**\n * Map containing {@link ICommand}s.\n *\n * @private\n */\nclass CommandMap extends Map {\n    constructor(input) {\n        super(CommandMap.getConstructorMap(input));\n    }\n    /**\n     * Creates a new instance with {@link Clingy} options to inherit.\n     *\n     * @param commands Command input to use.\n     * @param options Options for the Clingy instance.\n     */\n    static createWithOptions(commands, options) {\n        if (isMap(commands)) {\n            commands.forEach(val => CommandMap.createWithOptionsHelper(val, options));\n        }\n        else if (isPlainObject(commands)) {\n            forEach(commands, val => CommandMap.createWithOptionsHelper(val, options));\n        }\n        return new CommandMap(commands);\n    }\n    static createWithOptionsHelper(command, options) {\n        if (isPlainObject(command.sub) || isMap(command.sub)) {\n            command.sub = new Clingy(CommandMap.createWithOptions(command.sub, options), options);\n        }\n    }\n    static getConstructorMap(input) {\n        if (isMap(input)) {\n            return Array.from(input.entries());\n        }\n        if (isObject(input)) {\n            return Array.from(Object.entries(input));\n        }\n        return null;\n    }\n    /**\n     * Checks if the map contains a key, ignoring case.\n     *\n     * @param key Key to check for.\n     * @param caseSensitivity Case sensitivity to use.\n     * @return If the map contains a key, ignoring case.\n     */\n    hasCommand(key, caseSensitivity) {\n        if (caseSensitivity === CaseSensitivity.INSENSITIVE) {\n            return Array.from(this.keys())\n                .map(k => k.toLowerCase())\n                .includes(key.toLowerCase());\n        }\n        return this.has(key);\n    }\n    /**\n     * Returns the value for the key, ignoring case.\n     *\n     * @param key Key to check for.\n     * @param caseSensitivity Case sensitivity to use.\n     * @return The value for the key, ignoring case.\n     */\n    getCommand(key, caseSensitivity) {\n        if (caseSensitivity === CaseSensitivity.INSENSITIVE) {\n            let result = null;\n            this.forEach((value, k) => {\n                if (key.toLowerCase() === k.toLowerCase()) {\n                    result = value;\n                }\n            });\n            return result;\n        }\n        // Return null instead of undefined to be backwards compatible.\n        return this.has(key) ? this.get(key) : null;\n    }\n}\nexport { CommandMap };\n//# sourceMappingURL=CommandMap.js.map","// File is named \"_index.ts\" to avoid it being treated as a module index file.\n/**\n * Checks if a value is a valid index.\n *\n * A value is a valid index if its positive and an integer.\n *\n * @memberof Is\n * @since 5.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a valid index.\n * @example\n * isIndex(123)\n * // => true\n *\n * isIndex(0.43)\n * // => false\n *\n * isIndex(-4)\n * // => false\n *\n * isIndex(Infinity)\n * // => false\n */\nconst isIndex = (val) => Number.isInteger(val) && val >= 0;\n\n/**\n * Checks if the value is an instance of any of the given classes.\n * If at least one class gives back true, true is returned.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @param {...Class} targets Classes to check.\n * @returns {boolean} If the value is an instance of the class.\n * @example\n * isInstanceOf([], Array)\n * // => true\n *\n * isInstanceOf([], Map, Set, Array)\n * // => true\n *\n * isInstanceOf({}, Array, Set)\n * // => false\n */\nconst isInstanceOf = (val, ...targets) => targets.some(target => val instanceof target);\n\n/**\n * Checks if a value is an array-buffer.\n *\n * @memberof Is\n * @since 2.10.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is an array buffer.\n * @example\n * isArrayBuffer(new ArrayBuffer(8))\n * // => true\n *\n * isArrayBuffer([1, 2])\n * // => false\n */\nconst isArrayBuffer = (val) => isInstanceOf(val, ArrayBuffer);\n\n/**\n * Checks if the value has any of the given types.\n * If at least one type gives back true, true is returned.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @param {...string} types Type strings to compare the value to.\n * @returns {boolean} If the value has the type provided.\n * @example\n * isTypeOf(\"foo\", \"string\")\n * // => true\n *\n * isTypeOf(\"foo\", \"number\", \"string\")\n * // => true\n *\n * isTypeOf(\"foo\", \"number\")\n * // => false\n */\nconst isTypeOf = (val, ...types) => types.some(type => typeof val === type);\n\n/**\n * Checks if a value is a number.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a number.\n * @example\n * isNumber(1)\n * // => true\n *\n * isNumber(2.34)\n * // => true\n *\n * isNumber(Infinity)\n * // => true\n *\n * isNumber(NaN)\n * // => true\n * // (NaN is considered a number, see IEEE_754)\n *\n * isNumber(\"2\")\n * // => false\n *\n * isNumber(null)\n * // => false\n */\nconst isNumber = (val) => isTypeOf(val, \"number\");\n\n/**\n * Checks if a value is undefined or null.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is nil.\n * @example\n * isNil(null)\n * // => true\n *\n * isNil(undefined)\n * // => true\n *\n * isNil(0)\n * // => false\n *\n * isNil(\"\")\n * // => false\n */\nconst isNil = (val) => val == null;\n\n/**\n * Checks if a value is not nil and has a type of object.\n *\n * The main difference to {@link isObject} is that functions are not considered object-like,\n * because `typeof function(){}` returns `\"function\"`.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check,\n * @returns {boolean} If the value is object-like.\n * @example\n * isObjectLike({})\n * // => true\n *\n * isObjectLike([])\n * // => true\n *\n * isObjectLike(() => 1))\n * // => false\n *\n * isObjectLike(1)\n * // => false\n */\nconst isObjectLike = (val) => !isNil(val) && isTypeOf(val, \"object\");\n\n/**\n * Checks if a value is array-like.\n *\n * A value is considered array-like if it is object-like and has a length property.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is an array-like.\n * @example\n * isArrayLike([])\n * // => true\n *\n * isArrayLike({length: 0})\n * // => true\n *\n * isArrayLike({})\n * // => false\n */\nconst isArrayLike = (val) => isObjectLike(val) && isNumber(val.length);\n\n/**\n * Checks if a value is a typed array.\n *\n * @memberof Is\n * @since 2.10.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a typed array.\n * @example\n * isArrayTyped(new Int16Array());\n * // => true\n *\n * isArrayTyped(new Uint8Array());\n * // => true\n *\n * isArrayTyped([]);\n * // => false\n */\nconst isArrayTyped = (val) => isInstanceOf(val, Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Float32Array, Float64Array);\n\n/**\n * Checks if a value is a boolean.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a boolean.\n * @example\n * isBoolean(true)\n * // => true\n *\n * isBoolean(false)\n * // => true\n *\n * isBoolean(0)\n * // => false\n *\n * isBoolean(null)\n * // => false\n */\nconst isBoolean = (val) => isTypeOf(val, \"boolean\");\n\n/**\n * Checks if a value is a date instance.\n *\n * @memberof Is\n * @since 2.10.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a date instance.\n * @example\n * isDate(new Date())\n * // => true\n *\n * isDate(123213231)\n * // => false\n */\nconst isDate = (val) => isInstanceOf(val, Date);\n\n/**\n * Checks if a value is a string.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} if the value is a string.\n * @example\n * isString(\"foo\")\n * // => true\n *\n * isString(1)\n * // => false\n */\nconst isString = (val) => isTypeOf(val, \"string\");\n\n/**\n * Checks if a value is undefined.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is undefined.\n * @example\n * const a = {};\n *\n * isUndefined(a.b)\n * // => true\n *\n * isUndefined(undefined)\n * // => true\n *\n * isUndefined(null)\n * // => false\n *\n * isUndefined(1)\n * // => false\n */\nconst isUndefined = (val) => isTypeOf(val, \"undefined\");\n\n/**\n * Gets size of a value.\n *\n * If the value has a length or size property, the value of that is returned.\n * If the value is object-like, the length of its entries is returned.\n * Otherwise -1 is returned.\n *\n * @memberof Get\n * @since 6.0.0\n * @param {any} val Value to check.\n * @returns {number} The size of the value.\n * @example\n * getSize([1,2])\n * // => 2\n *\n * getSize({a:1})\n * // => 1\n *\n * getSize(new Set())\n * // => 0\n *\n * getSize(\"foo\")\n * // => 3\n *\n * getSize(1)\n * // => -1\n *\n * getSize(null)\n * // => -1\n */\nconst getSize = (val) => {\n    if (isNil(val)) {\n        return -1;\n    }\n    if (isArrayLike(val) || isString(val)) {\n        return val.length;\n    }\n    if (!isUndefined(val.size)) {\n        return val.size;\n    }\n    if (isObjectLike(val)) {\n        return Object.keys(val).length;\n    }\n    return -1;\n};\n\n/**\n * Checks if a value is empty.\n *\n * A value is consider empty if it is either a primitive or an object-like without content.\n * Array-likes and strings are considered empty if they have a length of zero,\n * sets/maps if they have a size of zero, and objects if their keys have a length of zero.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is empty.\n * @example\n * isEmpty([])\n * // => true\n *\n * isEmpty({})\n * // => true\n *\n * isEmpty(\"\")\n * // => true\n *\n * isEmpty(123)\n * // => true\n *\n * isEmpty(null)\n * // => true\n *\n * isEmpty(\"foo\")\n * // => false\n *\n * isEmpty([1, 2])\n * // => false\n *\n * isEmpty({a: 1})\n * // => false\n *\n * isEmpty(new Map([[\"foo\", 1]]))\n * // => false\n */\nconst isEmpty = (val) => getSize(val) < 1;\n\n/**\n * Iterates over each entry of an object.\n *\n * @memberof For\n * @param {object} obj Object to iterate.\n * @param {function} fn Function to use (`fn(key: *, val: *, index: number, obj: object) => void`).\n * @example\n * const a = {a: 1, b: 2};\n *\n * forEachEntry(a, (key, val, index) => {\n *     a[key] = val * index;\n * })\n * // a = {a: 0, b: 2}\n */\nconst forEachEntry = (obj, fn) => {\n    for (const [key, val] of Object.entries(obj)) {\n        fn(val, key, obj);\n    }\n};\n\n/**\n * Recursively checks if two values and their the contents are equal.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} a First value to check.\n * @param {any} b Second value to check.\n * @returns {boolean} If the values are equal.\n * @example\n * isEqual(1, 1)\n * // => true\n *\n * isEqual({}, {})\n * // => true\n *\n * isEqual([1, 2], [1, 2])\n * // => true\n *\n * isEqual([1, 2, [3, 4]], [1, 2, [3, 4]])\n * // => true\n *\n * isEqual([1, 2, 3], [1])\n * // => false\n *\n * isEqual([], {})\n * // => false\n *\n * isEqual(1, true)\n * // => false\n */\nconst isEqual = (a, b) => {\n    if (a === b) {\n        return true;\n    }\n    if (!isObjectLike(a) ||\n        !isObjectLike(b) ||\n        a.constructor !== b.constructor ||\n        Object.keys(a).length !== Object.keys(b).length) {\n        return false;\n    }\n    let equal = true;\n    forEachEntry(a, (aVal, key) => {\n        // Only check if the comparison didn't fail already\n        if (equal) {\n            equal = isUndefined(b[key]) ? false : isEqual(aVal, b[key]);\n        }\n    });\n    return equal;\n};\n\n/**\n * Checks if a value is an error.\n *\n * @memberof Is\n * @since 2.10.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is an error.\n * @example\n * isError(new URIError())\n * // => true\n *\n * isError(\"foo\")\n * // => false\n */\nconst isError = (val) => isInstanceOf(val, Error);\n\n/**\n * Checks if a value is a function.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a function.\n * @example\n * isFunction(function a(){})\n * // => true\n *\n * isFunction(Array.from)\n * // => true\n *\n * isFunction(null)\n * // => false\n */\nconst isFunction = (val) => isTypeOf(val, \"function\");\n\n/**\n * Checks if a value is a map.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a map.\n * @example\n * isMap(new Map())\n * // => true\n *\n * isMap([[1, 2]])\n * // => false\n */\nconst isMap = (val) => isInstanceOf(val, Map);\n\n/**\n * Checks if a value is an object.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is an object.\n * @example\n * isObject({})\n * // => true\n *\n * isObject([])\n * // => true\n *\n * isObject(() => 1))\n * // => true\n *\n * isObject(1)\n * // => false\n */\nconst isObject = (val) => isObjectLike(val) || isFunction(val);\n\n/**\n * Checks if a value is a plain object.\n *\n * An object is considered plain of its direct constructor is the built-in object constructor.\n *\n * @memberof Is\n * @since 2.9.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a plain object.\n * @example\n * isObjectPlain({})\n * // => true\n *\n * isObjectPlain([])\n * // => false\n *\n * isObjectPlain(() => 1)\n * // => false\n *\n * isObjectPlain(1)\n * // => false\n */\nconst isObjectPlain = (val) => isObject(val) && val.constructor === Object;\n\n/**\n * Checks if a value is a promise.\n *\n * @memberof Is\n * @since 3.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a promise.\n * @example\n * isPromise(new Promise((resolve, reject) => resolve(\"foo\")));\n * // => true\n *\n * isPromise(() => \"foo\");\n * // => false\n */\nconst isPromise = (val) => isInstanceOf(val, Promise);\n\n/**\n * Checks if a value is a regular expression.\n *\n * @memberof Is\n * @since 2.10.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a regular expression.\n * @example\n * isRegExp(new RegExp(\"foo\"))\n * // => true\n *\n * isRegExp(/foo/)\n * // => true\n *\n * isRegExp(\"/foo/\")\n * // => false\n */\nconst isRegExp = (val) => isInstanceOf(val, RegExp);\n\n/**\n * Checks if a value is a set.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a set.\n * @example\n * isSet(new Set())\n * // => true\n *\n * isSet([1, 2])\n * // => false\n */\nconst isSet = (val) => isInstanceOf(val, Set);\n\n/**\n * Checks if a value is a symbol.\n *\n * @memberof Is\n * @since 1.0.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a symbol.\n * @example\n * isSymbol(Symbol())\n * // => true\n *\n * isSymbol(Symbol.split)\n * // => true\n *\n * isSymbol(\"foo\")\n * // => false\n */\nconst isSymbol = (val) => isTypeOf(val, \"symbol\");\n\n/**\n * Checks if a value is a weak map.\n *\n * @memberof Is\n * @since 9.1.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a weak map.\n * @example\n * isMap(new WeakMap())\n * // => true\n *\n * isMap(new Map())\n * // => false\n */\nconst isWeakMap = (val) => isInstanceOf(val, WeakMap);\n\n/**\n * Checks if a value is a weak set.\n *\n * @memberof Is\n * @since 9.1.0\n * @param {any} val Value to check.\n * @returns {boolean} If the value is a weak set.\n * @example\n * isSet(new WeakSet())\n * // => true\n *\n * isSet(new Set())\n * // => false\n */\nconst isWeakSet = (val) => isInstanceOf(val, WeakSet);\n\n/**\n * Gets name of a value.\n *\n * If the value has a name or description property, the value of that is returned.\n * If the value is a string, it is returned as is.\n * Otherwise null is returned.\n *\n * @memberof Get\n * @since 10.2.0\n * @param {any} val Value to check.\n * @returns {string} The name of the value.\n * @example\n * getName(class Foo{})\n * // => \"Foo\"\n *\n * getName(function bar(){})\n * // => \"bar\"\n *\n * getName(Symbol(\"abc\"))\n * // => \"abc\"\n *\n * getName(\"foo\")\n * // => \"foo\"\n *\n * getName(1)\n * // => null\n */\nconst getName = (val) => {\n    if (isString(val)) {\n        return val;\n    }\n    if (isObject(val) && !isNil(val.name)) {\n        return val.name;\n    }\n    if (isSymbol(val) && !isNil(val.description)) {\n        return val.description;\n    }\n    return null;\n};\n\n/**\n * Returns a targets value in a given path.\n *\n * If the path doesn't exist in the target, null is returned.\n *\n * @memberof Get\n * @since 2.0.0\n * @param {any} target Target to check.\n * @param {string[]} path Path to use.\n * @returns {any} The value which was looked up, or null if the path could not be resolved.\n * @example\n * getPath({a: 1}, [\"a\"]);\n * // => 1\n *\n * getPath([4, 6, 8], [\"1\"]);\n * // => 6\n *\n * getPath({a: {b: 2, c: [10, 20]}}, [\"a\", \"c\", \"0\"]);\n * // => 10\n */\nconst getPath = (target, path) => {\n    let targetCurrent = target;\n    let index = 0;\n    while (!isUndefined(targetCurrent) && index < path.length) {\n        const keyCurrent = path[index];\n        if (isUndefined(targetCurrent[keyCurrent])) {\n            return null;\n        }\n        targetCurrent = targetCurrent[keyCurrent];\n        index++;\n    }\n    return targetCurrent;\n};\n\n/**\n * Clamps a number in a given range.\n *\n * @memberof Number\n * @since 1.0.0\n * @param {number} val Value to clamp\n * @param {number} min Inclusive minimum value.\n * @param {number} max Inclusive maximum value.\n * @returns {number} Value clamped into the range given.\n * @example\n * numClamp(5, 0, 10)\n * // => 5\n *\n * numClamp(-2, 0, 10)\n * // => 0\n *\n * numClamp(99, 0, 10)\n * // => 10\n */\nconst numClamp = (val, min, max) => {\n    if (val < min) {\n        return min;\n    }\n    if (val > max) {\n        return max;\n    }\n    return val;\n};\n\n/**\n * Clamps a number in the range of safe integers.\n *\n * @memberof Number\n * @since 7.1.0\n * @param {number} val Value to use.\n * @returns {number} Value clamped into the range of safe integers.\n * @example\n * numSafe(99999999999999999)\n * // => Number.MAX_SAFE_INTEGER\n *\n * numSafe(-Infinity)\n * // => Number.MIN_SAFE_INTEGER\n */\nconst numSafe = (val) => numClamp(val, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\n\n// noinspection SpellCheckingInspection\n/**\n * Returns the levenshtein string distance of two strings.\n *\n * @memberof String\n * @since 6.3.0\n * @param {string} str1 First string to compare.\n * @param {string} str2 Second string to compare.\n * @returns {number} Distance between the two strings.\n * @example\n * strDistance(\"Kitten\", \"Sitting\")\n * // => 3\n *\n * strDistance(\"String\", \"Stribng\")\n * // => 1\n *\n * strDistance(\"foo\", \"foo\")\n * // => 0\n */\nconst strDistance = (str1, str2) => {\n    if (str1.length === 0) {\n        return str2.length;\n    }\n    if (str2.length === 0) {\n        return str1.length;\n    }\n    const matrix = [];\n    for (let y = 0; y <= str2.length; y++) {\n        matrix[y] = [y];\n    }\n    for (let x = 0; x <= str1.length; x++) {\n        matrix[0][x] = x;\n    }\n    for (let y = 1; y <= str2.length; y++) {\n        const matrixColumnCurrent = matrix[y];\n        const matrixColumnLast = matrix[y - 1];\n        for (let x = 1; x <= str1.length; x++) {\n            if (str2.charAt(y - 1) === str1.charAt(x - 1)) {\n                matrixColumnCurrent[x] = matrixColumnLast[x - 1];\n            }\n            else {\n                const substitution = matrixColumnLast[x - 1] + 1;\n                const insertion = matrixColumnCurrent[x - 1] + 1;\n                const deletion = matrixColumnLast[x] + 1;\n                matrixColumnCurrent[x] = Math.min(substitution, insertion, deletion);\n            }\n        }\n    }\n    return matrix[str2.length][str1.length];\n};\n\n/**\n * Returns an array with every falsey value removed.\n *\n * @memberof Array\n * @since 1.0.0\n * @param {any[]} arr Array to compact.\n * @returns {any[]} Compacted array.\n * @example\n * arrCompact([1, \"\", \"\", 2, 3, null, 4, undefined, 5, \"\"])\n * // => [1, 2, 3, 4, 5]\n */\nconst arrCompact = (arr) => arr.filter(val => val);\n\n/**\n * Creates an array of words from a kebab-case string.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string} str String in kebab-case.\n * @returns {string[]} Words of the kebab-case string.\n * @example\n * strFromKebabCase(\"foo-bar\")\n * // => [\"foo\", \"bar\"]\n *\n * strFromKebabCase(\"Fizz-buzz-BaZZ\")\n * // => [\"Fizz\",\"buzz\",\"BaZZ\"]\n */\nconst strFromKebabCase = (str) => arrCompact(str.split(\"-\" /* KEBAB */));\n\n/**\n * Creates an array of words from a PascalCase or camelCase string.\n *\n * Functions the same as the removed strFromCamelCase.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string} str String in PascalCase.\n * @returns {string[]} Words of the PascalCase string.\n * @example\n * strFromPascalCase(\"FooBar\")\n * // => [\"Foo\", \"Bar\"]\n *\n * strFromPascalCase(\"FizzBuzzBazz\")\n * // => [\"Fizz\",\"Buzz\",\"Bazz\"]\n */\nconst strFromPascalCase = (str) => {\n    const result = [];\n    let cache = [];\n    str.split(\"\").forEach((letter, index) => {\n        if (index > 0 && letter !== letter.toLowerCase()) {\n            result.push(cache.join(\"\"));\n            cache = [];\n        }\n        cache.push(letter);\n    });\n    result.push(cache.join(\"\"));\n    return arrCompact(result);\n};\n\n/**\n * Creates an array of words from a snake_case string.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string} str String in snake_case.\n * @returns {string[]} Words of the snake_case string.\n * @example\n * strFromSnakeCase(\"foo_bar\")\n * // => [\"foo\", \"bar\"]\n *\n * strFromSnakeCase(\"Fizz_buzz_BaZZ\")\n * // => [\"Fizz\",\"buzz\",\"BaZZ\"]\n */\nconst strFromSnakeCase = (str) => arrCompact(str.split(\"_\" /* SNAKE */));\n\n/**\n * Collects the values of an array in a map as arrays.\n * If the function returns a nil value, the element will be skipped,\n * otherwise the return value will be used as key.\n *\n * @memberof Array\n * @since 6.1.0\n * @param {any[]} arr Array to collect.\n * @param {function} fn Function to use for collection (`fn(val: *, index: number, arr: any[]) => any`).\n * @returns {Map<any, any[]>} Map<val: *, arr: any[]> Collected map.\n * @example\n * arrCollect([1, 2, 3, 4, 5], val => val % 2)\n * // => Map<any, any[]>{0: [2, 4], 1: [1, 3, 5]}\n */\nconst arrCollect = (arr, fn) => {\n    const collected = new Map();\n    arr.forEach((val, index) => {\n        const key = fn(val, index, arr);\n        if (!isNil(key)) {\n            collected.set(key, collected.has(key) ? [...collected.get(key), val] : [val]);\n        }\n    });\n    return collected;\n};\n\n// noinspection SpellCheckingInspection\n/**\n * Returns strings similar to the input based its distance to the values in the list given.\n *\n * @memberof String\n * @since 6.3.0\n * @param {string} str String to check.\n * @param {Array<string>} list Array of values to compare the string to.\n * @param {boolean} [returnFull=false] If the full map should be returned, rather than just the closest matches.\n * @returns {Array<string>|Map<number,string[]>} Array of the closest matches, or the map if `returnFull` is true.\n * @example\n * strSimilar(\"Fob\", [\"Foo\", \"Bar\"])\n * // => [\"Foo\"]\n *\n * strSimilar(\"cmmit\", [\"init\", \"commit\", \"push\"])\n * // => [\"commit\"]\n *\n * strSimilar(\"Kitten\", [\"Sitten\", \"Sitting\", \"Bitten\"])\n * // => [\"Sitten\", \"Bitten\"]\n *\n * strSimilar(\"cmmit\", [\"init\", \"commit\", \"push\"], true)\n * // => Map<number, string[]>{1: [\"commit\"], 3: [\"init\"], 5: [\"push\"]}\n */\nconst strSimilar = (str, list, returnFull = false) => {\n    const result = arrCollect(list, (val) => strDistance(str, val));\n    if (!returnFull) {\n        return result.get(Math.min(...result.keys()));\n    }\n    return result;\n};\n\n/**\n * Creates a camelCase string from an array of words.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string[]} arr Words to use.\n * @returns {string} camelCase string of the words.\n * @example\n * strToCamelCase([\"foo\", \"bar\"])\n * // => \"fooBar\"\n *\n * strToCamelCase([\"Fizz\",\"buzz\",\"BaZZ\"])\n * // => \"fizzBuzzBazz\"\n */\nconst strToCamelCase = (arr) => arr\n    .map((val, index) => index === 0\n    ? val.toLowerCase()\n    : val.substr(0, 1).toUpperCase() + val.substr(1).toLowerCase())\n    .join(\"\");\n\n/**\n * Creates a kebab-case string from an array of words.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string[]} arr Words to use.\n * @returns {string} kebab-case string of the words.\n * @example\n * strToKebabCase([\"foo\", \"bar\"])\n * // => \"foo-bar\"\n *\n * strToKebabCase([\"Fizz\",\"buzz\",\"BaZZ\"])\n * // => \"fizz-buzz-bazz\"\n */\nconst strToKebabCase = (arr) => arr.map(val => val.toLowerCase()).join(\"-\" /* KEBAB */);\n\n/**\n * Creates a PascalCase string from an array of words.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string[]} arr Words to use.\n * @returns {string} PascalCase string of the words.\n * @example\n * strToPascalCase([\"foo\", \"bar\"])\n * // => \"FooBar\"\n *\n * strToPascalCase([\"Fizz\",\"buzz\",\"BaZZ\"])\n * // => \"FizzBuzzBazz\"\n */\nconst strToPascalCase = (arr) => arr\n    .map(val => val.substr(0, 1).toUpperCase() + val.substr(1).toLowerCase())\n    .join(\"\");\n\n/**\n * Creates a snake_case string from an array of words.\n *\n * @memberof String\n * @since 6.2.0\n * @param {string[]} arr Words to use.\n * @returns {string} snake_case string of the words.\n * @example\n * strToSnakeCase([\"foo\", \"bar\"])\n * // => \"foo_bar\"\n *\n * strToSnakeCase([\"Fizz\",\"buzz\",\"BaZZ\"])\n * // => \"fizz_buzz_bazz\"\n */\nconst strToSnakeCase = (arr) => arr.map(val => val.toLowerCase()).join(\"_\" /* SNAKE */);\n\n/**\n * Creates an array of elements split into sub arrays by size.\n *\n * @memberof Array\n * @since 2.0.0\n * @param {any[]} arr Array to chunk.\n * @param {number} chunk Size of the chunks.\n * @returns {any[]} Chunked array.\n * @example\n * arrChunk([1, 2, 3, 4, 5, 6], 2)\n * // => [[1, 2], [3, 4], [5, 6]]\n *\n * arrChunk([1, 2, 3, 4, 5], 3)\n * // => [[1, 2, 3], [4, 5]]\n */\nconst arrChunk = (arr, chunk) => {\n    if (!isIndex(chunk) || chunk === 0) {\n        return [];\n    }\n    const chunked = [];\n    for (let i = 0; i < arr.length; i += chunk) {\n        chunked.push(arr.slice(i, i + chunk));\n    }\n    return chunked;\n};\n\n/**\n * Counts how many times an element appears in an array.\n *\n * @memberof Array\n * @since 2.0.0\n * @param {any[]} arr Array to count.\n * @returns {Map<any, number>}  Map containing the counted result (`Map<val: *, count: number>`).\n * @example\n * arrCount([1, 1, 2, 2, 1, 3, 4, 1])\n * // => Map<any, number>{1: 4, 2: 2, 3: 1, 4: 1}\n */\nconst arrCount = (arr) => {\n    const counted = new Map();\n    arr.forEach(val => counted.set(val, counted.has(val) ? counted.get(val) + 1 : 1));\n    return counted;\n};\n\n/**\n * Merges an arbitrary amount of arrays.\n *\n * @memberof Array\n * @since 10.1.0\n * @param {...any[]} values Arrays to merge.\n * @returns {any[]} merged array.\n * @example\n * arrMerge([1, 2, 3], [1, 6, 3])\n * // => [1, 2, 3, 1, 6, 3]\n *\n * arrDifference([1, 2, 3], [0], [2, 0, 2])\n * // => [1, 2, 3, 0, 2, 0, 2]\n */\nconst arrMerge = (...values) => {\n    if (values.length === 0) {\n        return [];\n    }\n    const first = values[0];\n    if (values.length === 1) {\n        return first;\n    }\n    return first.concat(...values.slice(1));\n};\n\n/**\n * Returns an array of all elements that exist in the first array, but not any others.\n *\n * @memberof Array\n * @since 2.0.0\n * @param {any[]} arr Array to check.\n * @param {...any[]} values Arrays to compare to.\n * @returns {any[]} Difference of `arr` to `values`.\n * @example\n * arrDifference([1, 2, 3], [1, \"foo\", 3])\n * // => [2]\n *\n * arrDifference([1, 2, 3], [100], [2, 0, 2])\n * // => [1, 3]\n */\nconst arrDifference = (arr, ...values) => {\n    const valuesMerged = arrMerge(...values);\n    return arr.filter(item => !valuesMerged.includes(item));\n};\n\n// TODO: Figure out a way to properly use generics here.\n/**\n * Recursively maps the values of the input array with the iterator function and return the result.\n *\n * @memberof Array\n * @since 1.0.0\n * @param {any[]} arr Array to map.\n * @param {function} fn Function to use for mapping (`fn(val: *, index: number, arr: any[]) => any`).\n * @returns {any[]} Array with the mapped values.\n * @example\n * arrMapDeep([2, 4, [1, 1, [16], 4]], val => val * 2)\n * // => [4, 8, [2, 2, [32], 8]]\n */\nconst arrMapDeep = (arr, fn) => arr.map((val, index) => Array.isArray(val) ? arrMapDeep(val, fn) : fn(val, index, arr));\n\n/**\n * Recursively creates a new array with the values of the input iterable.\n *\n * @memberof Array\n * @since 2.0.0\n * @param {any[]} arr Array to copy recursively.\n * @returns {any[]} Recursively copied array.\n * @example\n * const a = [1, 2, 3, [5, [6]]];\n * const b = arrFromDeep(a);\n *\n * b[3][1][0] = 10;\n * // a = [1, 2, 3, [5, [6]]]\n * // b = [1, 2, 3, [5, [10]]]\n */\nconst arrFromDeep = (arr) => arrMapDeep(Array.from(arr), val => Array.isArray(val) ? Array.from(val) : val);\n\n/**\n * Returns an array of all elements that exist in the first array and at least once in one of the other arrays.\n *\n * @memberof Array\n * @since 2.0.0\n * @param {any[]} arr Array to check.\n * @param {...any[]} values Arrays to compare to.\n * @returns {any[]} Intersection of `arr` to `values`.\n * @example\n * arrIntersection([1, 2, 3], [1, \"foo\", 3])\n * // => [1, 3]\n *\n * arrIntersection([1, 2, 3], [100], [2, 0, 2])\n * // => [2]\n */\nconst arrIntersection = (arr, ...values) => {\n    const valuesMerged = arrMerge(...values);\n    return arr.filter(item => valuesMerged.includes(item));\n};\n\n/**\n * Returns an array with the item at the index removed.\n *\n * @memberof Array\n * @since 2.8.0\n * @param {any[]} arr Array to use.\n * @param {number} targetIndex Index to remove.\n * @returns {any[]} Array with the index removed.\n * @example\n * arrRemoveIndex([\"foo\", \"bar\", \"fizz\"], 1)\n * // => [\"foo\", \"fizz\"]\n */\nconst arrRemoveIndex = (arr, targetIndex) => arr.filter((val, index) => index !== targetIndex);\n\n/**\n * Returns an array with instances of the given item removed.\n *\n * @memberof Array\n * @since 2.8.0\n * @param {any[]} arr Array to use.\n * @param {any} targetItem Item to remove.\n * @param {boolean} [removeAll=true] If all occurrences should be removed, otherwise just the first occurrence will be.\n * @returns {any[]} Array with the item removed.\n * @example\n * arrRemoveItem([\"foo\", \"bar\", \"fizz\", \"bar\"], \"bar\")\n * // => [\"foo\", \"fizz\"]\n *\n * arrRemoveItem([\"foo\", \"bar\", \"fizz\", \"bar\"], \"bar\", false)\n * // => [\"foo\", \"fizz\", \"bar\"]\n */\nconst arrRemoveItem = (arr, targetItem, removeAll = true) => removeAll\n    ? arr.filter(item => item !== targetItem)\n    : arrRemoveIndex(arr, arr.indexOf(targetItem));\n\n/**\n * Returns an array with every n-th item from the input array.\n *\n * @memberof Array\n * @since 1.0.0\n * @param {any[]} arr Array to use.\n * @param {number} step Step to use.\n * @returns {any[]} Stepped array.\n * @example\n * arrStep([1, 2, 3, 4, 5, 6], 2)\n * // => [1, 3, 5]\n */\nconst arrStep = (arr, step) => arr.filter((val, index) => index % step === 0);\n\n/**\n * Returns an array of all unique elements in an array.\n *\n * @memberof Array\n * @since 1.0.0\n * @param {any[]} arr Array to use.\n * @returns {any[]} Array of the unique values.\n * @example\n * arrUniq([1, 1, 1, 2, 3, 1, 2, 1, 4])\n * // => [1, 2, 3, 4]\n */\nconst arrUniq = (arr) => Array.from(new Set(arr));\n\n// TODO: Figure out a way to properly use generics here.\n/**\n * Maps each entry of an object and returns the result.\n *\n * @memberof Object\n * @since 1.0.0\n * @param {Object} obj Object to map.\n * @param {function} fn Mapping function (`fn(key: any, val: any, index: number, obj: object) => any`)\n * @returns {Object} Mapped object.\n * @example\n * objMap({a: 4, b: 2}, (key, val) => val * 2)\n * // => {a: 8, b: 4}\n */\nconst objMap = (obj, fn) => {\n    const mapped = Array.isArray(obj) ? [] : {};\n    forEachEntry(obj, (val, key) => {\n        mapped[key] = fn(val, key, obj);\n    });\n    return mapped;\n};\n\n/**\n * Replaces every circular reference in an object with a value, defaulting to null.\n *\n * Can take a custom replacer function and a pre-filled weak set of references.\n *\n * @memberof Object\n * @since 6.0.0\n * @param {Object} obj Object to decycle.\n * @param {function} [fn=() => null] Decycling function (`fn(key: *, val: any, index: number, obj: object) => void`)\n * @param {WeakSet<any>} [references=new WeakSet()] WeakSet prefilled with encountered references.\n * @returns {Object} Decycled object.\n * @example\n * const a = {a: {}, b: 1, c: 2};\n *\n * a.a = a;\n *\n * objDecycle(a)\n * // => {a: null, b: 1, c: 2}\n *\n * objDecycle(a, key => `_${key}`)\n * // => {a: \"_a\", b: 1, c: 2}\n */\nconst objDecycle = (obj, fn = () => null, references = new WeakSet()) => {\n    references.add(obj);\n    return objMap(obj, (val, key, objNew) => {\n        if (references.has(val)) {\n            return fn(val, key, objNew);\n        }\n        if (isObjectLike(val)) {\n            references.add(val);\n            return objDecycle(val, fn, references);\n        }\n        return val;\n    });\n};\n\n/**\n * Creates a new object with the entries of the input object.\n *\n * @memberof Object\n * @since 1.0.0\n * @param {Object} obj Object to copy.\n * @returns {Object} Copy of the object.\n * @example\n * const a = {a: 4, b: 2};\n * const b = objFrom(a);\n *\n * b.a = 10;\n * // a = {a: 4, b: 2}\n * // b = {a: 10, b: 2}\n */\nconst objFrom = (obj) => Object.assign({}, obj);\n\n// TODO: Figure out a way to properly use generics here.\n/**\n * Sets every nil property of an object to the value from the default object.\n *\n * @memberof Object\n * @since 2.6.0\n * @param {Object} obj Object to default.\n * @param {Object} objDefault Object containing the default values.\n * @returns {Object} Object containing the default values in keys it did not have or had nil value in.\n * @example\n * objDefaults({a: 1, c: 5}, {a: 1, b: 2, c: 3})\n * // => {a: 1, b: 2, c: 5}\n */\nconst objDefaults = (obj, objDefault) => {\n    const defaulted = Array.isArray(obj)\n        ? Array.from(obj)\n        : objFrom(obj);\n    forEachEntry(objDefault, (valDefault, keyDefault) => {\n        if (isUndefined(obj[keyDefault])) {\n            defaulted[keyDefault] = valDefault;\n        }\n    });\n    return defaulted;\n};\n\n// TODO: Figure out a way to properly use generics here.\n/**\n * Recursively sets every nil property of object to the value from the default object.\n *\n * @memberof Object\n * @since 2.7.0\n * @param {Object} obj Object to default.\n * @param {Object} objDefault Object containing the default values.\n * @returns {Object} Object containing the default values in keys it did not have or had nil value in.\n * @example\n * objDefaultsDeep({a: [1, 2], c: {f: \"x\"}}, {a: [1, 2, 3], b: 2, c: {f: \"y\"}})\n * // => {a: [1, 2, 3], b: 2, c: {f: \"x\"}}\n */\nconst objDefaultsDeep = (obj, objDefault) => {\n    const defaulted = Array.isArray(obj)\n        ? Array.from(obj)\n        : objFrom(obj);\n    forEachEntry(objDefault, (valDefault, keyDefault) => {\n        const valGiven = obj[keyDefault];\n        if (isObjectLike(valDefault)) {\n            defaulted[keyDefault] = isObjectLike(valGiven)\n                ? objDefaultsDeep(valGiven, valDefault)\n                : valDefault;\n        }\n        else {\n            defaulted[keyDefault] = isUndefined(valGiven)\n                ? valDefault\n                : valGiven;\n        }\n    });\n    return defaulted;\n};\n\n// TODO: Figure out a way to properly use generics here.\n/**\n * Recursively maps each entry of an object and returns the result.\n *\n * @memberof Object\n * @since 1.0.0\n * @param {Object} obj Object to map.\n * @param {function} fn Mapping function (`fn(key: any, val: any, index: number, obj: object) => any`)\n * @returns {Object} Mapped object.\n * @example\n * objMapDeep({a: {b: 2, c: [10, 20]}}, (key, val) => val * 2)\n * // => {a: {b: 4, c: [20, 40]}}\n */\nconst objMapDeep = (obj, fn) => objMap(obj, (val, key, objNew) => isObjectLike(val) ? objMapDeep(val, fn) : fn(val, key, objNew));\n\n/**\n * Recursively creates a new object with the entries of the input object.\n *\n * @memberof Object\n * @since 1.0.0\n * @param {Object} obj Object to copy.\n * @returns {Object} Copy of the object.\n * @example\n * const a = {a: {b: 2, c: {a: 10, b: 20}}};\n * const b = objFromDeep(a);\n *\n * b.a.c.a = 123;\n * // a = {a: {b: 2, c: {a: 10, b: 20}}\n * // b = {a: {b: 2, c: {a: 123, b: 20}}}\n */\nconst objFromDeep = (obj) => objMapDeep(objFrom(obj), val => (isObjectLike(val) ? objFrom(val) : val));\n\n/**\n * Creates a map from an object.\n *\n * @memberof Map\n * @since 1.0.0\n * @param {Object} obj Object to use.\n * @returns {Map} Map created from the object.\n * @example\n * mapFromObject({a: 1, b: 4, c: 5})\n * // => Map<string,number>{a: 1, b: 4, c: 5}\n */\nconst mapFromObject = (obj) => new Map(Object.entries(obj));\n\n/**\n * Recursively iterates over each element in an array.\n *\n * @memberof For\n * @param {any[]} arr Array to iterate.\n * @param {function} fn Function to use (`fn(val: *, index: number, arr: any[]) => void`).\n * @example\n * const a = [2, 4, [1, 1, [16], 4]];\n *\n * forEachDeep(a, (val, index, arr) => {\n *     arr[index] = index * val;\n * })\n * // a = [0, 4, [0, 1, [0], 12]]\n */\nconst forEachDeep = (arr, fn) => arr.forEach((val, index) => Array.isArray(val) ? forEachDeep(val, fn) : fn(val, index, arr));\n\n/**\n * Recursively iterates over each entry of an object.\n *\n * @memberof For\n * @param {object} obj Object to iterate.\n * @param {function} fn Function to use (`fn(key: *, val: *, index: number, obj: object) => void`).\n * @example\n * const a = {a: 1, b: {c: [1, 2]}};\n *\n * forEachEntryDeep(a, (key, val, index, obj) => {\n *     obj[key] = index * val;\n * })\n * // a = {a: 0, b: {c: [0, 2]}}\n */\nconst forEachEntryDeep = (obj, fn) => forEachEntry(obj, (val, key) => isObjectLike(val) ? forEachEntryDeep(val, fn) : fn(val, key, obj));\n\n/**\n * Creates a debounced function.\n *\n * Debouncing combines multiple function invocations in the given timeout into a single one.\n * @see https://css-tricks.com/the-difference-between-throttling-and-debouncing/\n *\n * @memberof Fn\n * @since 8.1.0\n * @param {Function} fn Function to debounce.\n * @param {number} timeout Timeout to use.\n * @returns {Function} Debounced function.\n * @example\n * const foo = (a, b) => console.log(a + b);\n * const fooDebounced = fnDebounce(foo, 500);\n * // function calls will be debounced to 500ms\n */\nconst fnDebounce = (fn, timeout) => {\n    let timer = null; // Seems to require any, as the return type of the browser and node are different here.\n    // tslint:disable-next-line:only-arrow-functions\n    return function () {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            timer = null;\n            fn.apply(this, Array.of(arguments));\n        }, timeout);\n    };\n};\n\n/**\n * Creates a throttled function.\n *\n * Throttling ensures that the function can only be invoked once in the given timeout.\n * @see https://css-tricks.com/the-difference-between-throttling-and-debouncing/\n *\n * @memberof Fn\n * @since 3.1.0\n * @param {Function} fn Function to throttle.\n * @param {number} timeout Timeout to use.\n * @returns {Function} Throttled function.\n * @example\n * const foo = (a, b) => console.log(a + b);\n * const fooThrottled = fnThrottle(foo, 500);\n * // function calls will be throttled to 500ms\n */\nconst fnThrottle = (fn, timeout) => {\n    let timer = null; // Seems to require any, as the return type of the browser and node are different here.\n    let last = null;\n    // tslint:disable-next-line:only-arrow-functions\n    return function () {\n        const now = Date.now();\n        const run = () => {\n            last = now;\n            fn.apply(this, Array.of(arguments));\n        };\n        if (last != null && now < last + timeout) {\n            clearTimeout(timer);\n            timer = setTimeout(run, timeout);\n        }\n        else {\n            run();\n        }\n    };\n};\n\n/**\n * Binary-search implementation.\n *\n * @memberof Search\n * @since 5.0.0\n * @param {number[]} arr Array to search in.\n * @param {number} search Value to search.\n * @returns {number|null} Index of the value in the array, or null if none is found.\n * @example\n * searchBinary([0, 1, 2], 1)\n * // => 1\n *\n * searchBinary([0, 1, 2], 100)\n * // => null\n */\nconst searchBinary = (arr, search) => {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid;\n    while (low <= high) {\n        mid = Math.floor(low + (high - low) / 2);\n        const current = arr[mid];\n        if (current === search) {\n            return mid;\n        }\n        if (current < search) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return null;\n};\n\n/**\n * Return a random number in the given range.\n *\n * @memberof Random\n * @since 3.0.0\n * @param {number} [min=0] Inclusive minimum value.\n * @param {number} [max=1] Inclusive maximum value.\n * @param {boolean} [float=false] If the value should be a float.\n * @returns {number} Random number\n * @example\n * randNumber()\n * // => 1\n *\n * randNumber(0, 100)\n * // => 54\n *\n * randNumber(2, 10, true)\n * // => 6.23132496\n */\nconst randNumber = (min = 0, max = 1, float = false) => {\n    const diff = max - min;\n    if (diff === 0) {\n        return min;\n    }\n    const rand = Math.random() * diff;\n    if (float) {\n        return min + rand;\n    }\n    return min + Math.floor((rand / diff) * (diff + 1));\n};\n\n/**\n * Return a random item from an array.\n *\n * @memberof Random\n * @since 3.0.0\n * @param {any[]} arr Array to use.\n * @returns {any} Random item from the array.\n * @example\n * randItem([\"foo\", \"bar\"])\n * // => \"foo\"\n *\n * randItem([1, 2, 3, 4, 5])\n * // => 3\n */\nconst randItem = (arr) => arr[randNumber(0, arr.length - 1)];\n\n/**\n * Shuffles an array randomly and returns it, using the Fisher-Yates shuffle algorithm.\n *\n * @memberof Random\n * @since 5.0.0\n * @param {any[]} arr Array to shuffle\n * @returns {any[]} Shuffled array.\n * @example\n * randShuffle([1,2,3])\n * // => [3,1,2]\n */\nconst randShuffle = (arr) => {\n    const shuffled = Array.from(arr);\n    let length = shuffled.length;\n    while (length--) {\n        const index = randNumber(0, length);\n        const temp = shuffled[length];\n        shuffled[length] = shuffled[index];\n        shuffled[index] = temp;\n    }\n    return shuffled;\n};\n\n/**\n * Value checking, type checking, and comparison.\n *\n * Note that some equivalents found in lodash are not provided here due to native equivalents:\n * - isArray -> Array.isArray\n * - isInteger -> Number.isInteger\n * - isSafeInteger -> Number.isSafeInteger\n * - isFinite -> Number.isFinite\n * - isNaN -> Number.isNaN\n *\n * @namespace Is\n */\nconst l_Is = {\n    isEqual,\n    isInstanceOf,\n    isTypeOf,\n    isUndefined,\n    isNil,\n    isNumber,\n    isString,\n    isBoolean,\n    isSymbol,\n    isObject,\n    isObjectLike,\n    isObjectPlain,\n    isArrayLike,\n    isArrayBuffer,\n    isArrayTyped,\n    isPromise,\n    isMap,\n    isSet,\n    isWeakMap,\n    isWeakSet,\n    isDate,\n    isRegExp,\n    isFunction,\n    isError,\n    isEmpty,\n    isIndex\n};\n/**\n * Get values and properties of a target.\n *\n * @namespace Get\n */\nconst l_Get = {\n    getPath,\n    getSize,\n    getName\n};\n/**\n * Number manipulation and comparison.\n *\n * @namespace Number\n */\nconst l_Number = {\n    numClamp,\n    numSafe\n};\n/**\n * String manipulation and comparison.\n *\n * @namespace String\n */\nconst l_String = {\n    strDistance,\n    strSimilar,\n    strFromKebabCase,\n    strFromPascalCase,\n    strFromSnakeCase,\n    strToCamelCase,\n    strToKebabCase,\n    strToPascalCase,\n    strToSnakeCase\n};\n/**\n * Array manipulation and analysis.\n *\n * @namespace Array\n */\nconst l_Array = {\n    arrFromDeep,\n    arrMapDeep,\n    arrCompact,\n    arrMerge,\n    arrChunk,\n    arrStep,\n    arrRemoveIndex,\n    arrRemoveItem,\n    arrCount,\n    arrCollect,\n    arrDifference,\n    arrIntersection,\n    arrUniq\n};\n/**\n * Object manipulation and analysis.\n *\n * @namespace Object\n */\nconst l_Object = {\n    objFrom,\n    objFromDeep,\n    objMap,\n    objMapDeep,\n    objDefaults,\n    objDefaultsDeep,\n    objDecycle\n};\n/**\n * Map manipulation.\n *\n * @namespace Map\n */\nconst l_Map = {\n    mapFromObject\n};\n/**\n * Looping through ranges, arrays and objects.\n *\n * @namespace For\n */\nconst l_For = {\n    forEachDeep,\n    forEachEntry,\n    forEachEntryDeep\n};\n/**\n * Function manipulation.\n *\n * @namespace Fn\n */\nconst l_Fn = {\n    fnDebounce,\n    fnThrottle\n};\n/**\n * Array and object search.\n *\n * @namespace Search\n */\nconst l_Search = {\n    searchBinary\n};\n/**\n * Random number generation and value picking.\n *\n * @namespace Random\n */\nconst l_Random = {\n    randNumber,\n    randItem,\n    randShuffle\n};\n\nexport { arrChunk, arrCollect, arrCompact, arrCount, arrDifference, arrFromDeep, arrIntersection, arrMapDeep, arrMerge, arrRemoveIndex, arrRemoveItem, arrStep, arrUniq, fnDebounce, fnThrottle, forEachDeep, forEachEntry, forEachEntryDeep, getName, getPath, getSize, isArrayBuffer, isArrayLike, isArrayTyped, isBoolean, isDate, isEmpty, isEqual, isError, isFunction, isIndex, isInstanceOf, isMap, isNil, isNumber, isObject, isObjectLike, isObjectPlain, isPromise, isRegExp, isSet, isString, isSymbol, isTypeOf, isUndefined, isWeakMap, isWeakSet, l_Array, l_Fn, l_For, l_Get, l_Is, l_Map, l_Number, l_Object, l_Random, l_Search, l_String, mapFromObject, numClamp, numSafe, objDecycle, objDefaults, objDefaultsDeep, objFrom, objFromDeep, objMap, objMapDeep, randItem, randNumber, randShuffle, searchBinary, strDistance, strFromKebabCase, strFromPascalCase, strFromSnakeCase, strSimilar, strToCamelCase, strToKebabCase, strToPascalCase, strToSnakeCase };\n","import { getName } from 'lightdash';\n\n/**\n * Default level-list. Can be used to set the level of a {@link Logby} instance.\n *\n * @public\n */\nconst Levels = {\n    NONE: {\n        val: -1\n    },\n    ERROR: {\n        name: \"ERROR\",\n        val: 0\n    },\n    WARN: {\n        name: \"WARN\",\n        val: 1\n    },\n    INFO: {\n        name: \"INFO\",\n        val: 2\n    },\n    DEBUG: {\n        name: \"DEBUG\",\n        val: 3\n    },\n    TRACE: {\n        name: \"TRACE\",\n        val: 4\n    }\n};\n\n/**\n * Helper method for creating log entry prefix.\n *\n * @private\n * @param name Name of the logger instance.\n * @param level Level of the entry to log.\n * @returns Log entry prefix.\n */\nconst createDefaultLogPrefix = (name, level) => `${new Date().toISOString()} ${level.name} ${name}`;\n/**\n * Default appender, doing the actual logging.\n *\n * @public\n * @param name Name of the logger instance.\n * @param level Level of the entry to log.\n * @param args Arguments to log.\n */\nconst defaultLoggingAppender = (name, level, args) => {\n    let loggerFn = console.log;\n    if (level === Levels.ERROR) {\n        // tslint:disable-next-line\n        loggerFn = console.error;\n    }\n    else if (level === Levels.WARN) {\n        // tslint:disable-next-line\n        loggerFn = console.warn;\n    }\n    else if (level === Levels.INFO) {\n        // tslint:disable-next-line\n        loggerFn = console.info;\n    }\n    loggerFn(createDefaultLogPrefix(name, level), ...args);\n};\n\nconst defaultDelegationNameProducer = (name) => `${name} (Delegated)`;\n/**\n * Creates a new delegatingAppender for the given target.\n * A delegatingAppender is an appender delegating all invocations to the given other {@link Logby} instance.\n *\n * @public\n * @param target Logby instance to delegate to.\n * @param nameProducer Function for calculating the new internal logger name.\n * @returns A delegating appender delegating to the given target.\n */\nconst createDelegatingAppender = (target, nameProducer = defaultDelegationNameProducer) => (name, level, args) => target.getLogger(nameProducer(name)).log(level, ...args);\n\n/**\n * Checks if the given level is considered part of the active level.\n *\n * @private\n * @param incoming Level to check.\n * @param active level to check against.\n * @returns if the given level matches the active level.\n */\nconst matchesLevel = (incoming, active) => incoming.val <= active.val;\n\n/**\n * Default {@link ILogger} class.\n *\n * @private\n */\nclass DefaultLogger {\n    /**\n     * Creates a new {@link DefaultLogger}.\n     * Should not be constructed directly, rather use {@link Logby.getLogger}.\n     *\n     * @public\n     * @param root Root logger of this logger.\n     * @param name Name of the logger.\n     */\n    constructor(root, name) {\n        this.root = root;\n        this.name = name;\n    }\n    /**\n     * Logs a message.\n     *\n     * @public\n     * @param level Levels of the log.\n     * @param args Arguments to be logged.\n     */\n    log(level, ...args) {\n        if (this.root.level.val >= level.val) {\n            this.root.appenders.forEach(fn => fn(this.name, level, args));\n        }\n    }\n    /**\n     * Logs an error.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    error(...args) {\n        this.log(Levels.ERROR, ...args);\n    }\n    /**\n     * Logs a warning.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    warn(...args) {\n        this.log(Levels.WARN, ...args);\n    }\n    /**\n     * Logs an info.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    info(...args) {\n        this.log(Levels.INFO, ...args);\n    }\n    /**\n     * Logs a debug message.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    debug(...args) {\n        this.log(Levels.DEBUG, ...args);\n    }\n    /**\n     * Logs a trace message.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    trace(...args) {\n        this.log(Levels.TRACE, ...args);\n    }\n    /**\n     * Checks if the currently set log level includes error logging.\n     *\n     * @public\n     * @returns if the currently set log level includes error logging.\n     */\n    isError() {\n        return matchesLevel(Levels.ERROR, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes warning logging.\n     *\n     * @public\n     * @returns if the currently set log level includes warning logging.\n     */\n    isWarn() {\n        return matchesLevel(Levels.WARN, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes info logging.\n     *\n     * @public\n     * @returns if the currently set log level includes info logging.\n     */\n    isInfo() {\n        return matchesLevel(Levels.INFO, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes debug logging.\n     *\n     * @public\n     * @returns if the currently set log level includes debug logging.\n     */\n    isDebug() {\n        return matchesLevel(Levels.DEBUG, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes trace logging.\n     *\n     * @public\n     * @returns if the currently set log level includes trace logging.\n     */\n    isTrace() {\n        return matchesLevel(Levels.TRACE, this.root.level);\n    }\n}\n\n/**\n * Main logby class.\n */\nclass Logby {\n    /**\n     * Creates a new Logby instance.\n     */\n    constructor() {\n        this.loggers = new Map();\n        this.appenders = new Set([defaultLoggingAppender]);\n        this.level = Levels.INFO;\n    }\n    /**\n     * Gets and/or creates a logger instance.\n     *\n     * @param nameable String or INameable (ex: named class or named function).\n     * @returns The logger instance.\n     */\n    getLogger(nameable) {\n        const name = getName(nameable);\n        if (name == null) {\n            throw new TypeError(`'${nameable}' is neither an INameable nor a string.`);\n        }\n        if (!this.loggers.has(name)) {\n            const logger = new DefaultLogger(this, name);\n            this.loggers.set(name, logger);\n        }\n        return this.loggers.get(name);\n    }\n}\n\nexport { Levels, Logby, createDelegatingAppender, defaultLoggingAppender };\n","import { Logby } from \"logby\";\nconst clingyLogby = new Logby();\nexport { clingyLogby };\n//# sourceMappingURL=logger.js.map","var ArgumentResolving;\n(function (ArgumentResolving) {\n    ArgumentResolving[ArgumentResolving[\"RESOLVE\"] = 0] = \"RESOLVE\";\n    ArgumentResolving[ArgumentResolving[\"IGNORE\"] = 1] = \"IGNORE\";\n})(ArgumentResolving || (ArgumentResolving = {}));\nexport { ArgumentResolving };\n//# sourceMappingURL=ArgumentResolving.js.map","import { isNil } from \"lodash\";\nimport { clingyLogby } from \"../logger\";\n/**\n * Orchestrates mapping of {@link IArgument}s to user-provided input.\n *\n * @private\n */\nclass ArgumentMatcher {\n    /**\n     * Matches a list of {@link IArgument}s to a list of string input arguments.\n     *\n     * @param expected {@link Argument} list of a {@link ICommand}\n     * @param provided List of user-provided arguments.\n     */\n    constructor(expected, provided) {\n        this.missing = [];\n        this.result = new Map();\n        ArgumentMatcher.logger.debug(\"Matching arguments:\", expected, provided);\n        expected.forEach((expectedArg, i) => {\n            if (i < provided.length) {\n                const providedArg = provided[i];\n                ArgumentMatcher.logger.trace(`Found matching argument for ${expectedArg.name}, adding to result: ${providedArg}`);\n                this.result.set(expectedArg.name, providedArg);\n            }\n            else if (expectedArg.required) {\n                ArgumentMatcher.logger.trace(`No matching argument found for ${expectedArg.name}, adding to missing.`);\n                this.missing.push(expectedArg);\n            }\n            else if (!isNil(expectedArg.defaultValue)) {\n                ArgumentMatcher.logger.trace(`No matching argument found for ${expectedArg.name}, using default: ${expectedArg.defaultValue}`);\n                this.result.set(expectedArg.name, expectedArg.defaultValue);\n            }\n            else {\n                ArgumentMatcher.logger.trace(`No matching argument found for ${expectedArg.name}, using null.`);\n                this.result.set(expectedArg.name, null);\n            }\n        });\n        ArgumentMatcher.logger.debug(`Finished matching arguments: ${expected.length} expected, ${this.result.size} found and ${this.missing.length} missing.`);\n    }\n}\nArgumentMatcher.logger = clingyLogby.getLogger(ArgumentMatcher);\nexport { ArgumentMatcher };\n//# sourceMappingURL=ArgumentMatcher.js.map","import { isEmpty, toPairs, upperFirst, camelCase, forEach, concat, filter, indexOf, isArrayLike, map, mapValues, isObjectLike, isString, isObject, isSymbol } from 'lodash';\n\n/**\n * Checks if the string is blank (no non-space content).\n *\n * @since 11.0.0\n * @memberOf Is\n * @param str String to use.\n * @returns If the file is blank.\n * @example\n * isBlank(\"\")\n * // => true\n *\n * isBlank(\"  \")\n * // => true\n *\n * isBlank(\" foo \")\n * // => false\n */\nconst isBlank = (str) => isEmpty(str.trim());\n\n/**\n * Checks if a value is a promise.\n *\n * @since 3.0.0\n * @memberOf Is\n * @param value Value to check.\n * @returns If the value is a promise.\n * @example\n * isPromise(new Promise((resolve, reject) => resolve(\"foo\")));\n * // => true\n *\n * isPromise(() => \"foo\");\n * // => false\n */\nconst isPromise = (value) => value instanceof Promise;\n\n/**\n * Creates a map from an objects entries.\n *\n * @since 1.0.0\n * @memberOf Lang\n * @param object Object to use.\n * @returns Map created from the object.\n * @example\n * toMap({a: 1, b: 4, c: 5})\n * // => Map{a: 1, b: 4, c: 5}\n */\nconst toMap = (object) => new Map(toPairs(object));\n\n// noinspection SpellCheckingInspection\n/**\n * Returns the levenshtein string distance of two strings.\n *\n * @since 6.3.0\n * @memberOf String\n * @param str1 First string to compare.\n * @param str2 Second string to compare.\n * @returns Distance between the two strings.\n * @example\n * distance(\"Kitten\", \"Sitting\")\n * // => 3\n *\n * distance(\"String\", \"Stribng\")\n * // => 1\n *\n * distance(\"foo\", \"foo\")\n * // => 0\n */\nconst distance = (str1, str2) => {\n    if (str1.length === 0) {\n        return str2.length;\n    }\n    if (str2.length === 0) {\n        return str1.length;\n    }\n    const matrix = [];\n    for (let y = 0; y <= str2.length; y++) {\n        matrix[y] = [y];\n    }\n    for (let x = 0; x <= str1.length; x++) {\n        matrix[0][x] = x;\n    }\n    for (let y = 1; y <= str2.length; y++) {\n        const matrixColumnCurrent = matrix[y];\n        const matrixColumnLast = matrix[y - 1];\n        for (let x = 1; x <= str1.length; x++) {\n            if (str2.charAt(y - 1) === str1.charAt(x - 1)) {\n                matrixColumnCurrent[x] = matrixColumnLast[x - 1];\n            }\n            else {\n                const substitution = matrixColumnLast[x - 1] + 1;\n                const insertion = matrixColumnCurrent[x - 1] + 1;\n                const deletion = matrixColumnLast[x] + 1;\n                matrixColumnCurrent[x] = Math.min(substitution, insertion, deletion);\n            }\n        }\n    }\n    return matrix[str2.length][str1.length];\n};\n\n/**\n * Creates a PascalCase string from a string.\n *\n * @since 6.2.0\n * @memberOf String\n * @param str String to use.\n * @returns PascalCase string of the input string.\n * @example\n * pascalCase(\"fooBar\")\n * // => \"FooBar\"\n *\n * pascalCase(\"__foo_bar__\")\n * // => \"FizzBuzzBazz\"\n */\nconst pascalCase = (str) => upperFirst(camelCase(str));\n\n/**\n * Collects elements in an array into a an array of merged elements.\n *\n * @since 11.0.0\n * @memberOf Array\n * @param collection Collection to group.\n * @param keyProducer Function returning the key for the value.\n * @param initializer Function initializing a new mergable object.\n * @param reducer Consumer mutating the existing object with the new data.\n * @returns Grouped and merged map.\n * @example\n * groupMapReducingBy(\n *     [\"foo\", \"bar\", \"fizz\", \"buzz\"],\n *     val => val.charAt(0),\n *     () => {\n *        return {\n *            count: 0,\n *            matches: []\n *        };\n *     },\n *     (current, val) => {\n *         current.count++;\n *         current.matches.push(val);\n *         return current;\n *     }\n * )\n * // => Map{\"f\": {count: 2, matches: [\"foo\", \"fizz\"]}, \"b\": {count: 2, matches: [\"bar\", \"buzz\"]}}\n */\nconst groupMapReducingBy = (collection, keyProducer, initializer, reducer) => {\n    const result = new Map();\n    forEach(collection, (value, index) => {\n        const key = keyProducer(value, index, collection);\n        if (!result.has(key)) {\n            result.set(key, initializer(value, index, collection));\n        }\n        result.set(key, reducer(result.get(key), value, index, collection));\n    });\n    return result;\n};\n\n/**\n * Collects the values of an array in a map as array values,\n * using the return value of the function as key.\n *\n * @since 6.1.0\n * @memberOf Array\n * @param collection Collection to group.\n * @param keyFn Function to use for grouping.\n * @returns Grouped map.\n * @example\n * groupMapBy([1, 2, 3, 4, 5], val => val % 2)\n * // => Map{0: [2, 4], 1: [1, 3, 5]}\n */\nconst groupMapBy = (collection, keyFn) => groupMapReducingBy(collection, keyFn, () => [], (current, value) => concat(current, value));\n\n// noinspection SpellCheckingInspection\n/**\n * Returns strings similar to the input based its levenshtein distance to the values in the list given.\n *\n * @since 6.3.0\n * @memberOf String\n * @param str String to check.\n * @param collection Array of values to compare the string to.\n * @param returnFull If the full map should be returned, rather than just the closest matches.\n * @returns Array of the closest matches, or the map if `returnFull` is true.\n * @example\n * similar(\"Fob\", [\"Foo\", \"Bar\"])\n * // => [\"Foo\"]\n *\n * similar(\"cmmit\", [\"init\", \"commit\", \"push\"])\n * // => [\"commit\"]\n *\n * similar(\"Kitten\", [\"Sitten\", \"Sitting\", \"Bitten\"])\n * // => [\"Sitten\", \"Bitten\"]\n *\n * similar(\"cmmit\", [\"init\", \"commit\", \"push\"], true)\n * // => Map<number, string[]>{1: [\"commit\"], 3: [\"init\"], 5: [\"push\"]}\n */\nconst similar = (str, collection, returnFull = false) => {\n    const result = groupMapBy(collection, (value) => distance(str, value));\n    if (returnFull) {\n        return result;\n    }\n    const lowestKey = Math.min(...result.keys());\n    return result.get(lowestKey);\n};\n\n/**\n * Finds all regex matches in a string. Meant to be used with a global regex.\n *\n * @since 11.0.0\n * @memberOf String\n * @param str String to match against.\n * @param pattern SRegex pattern to match.\n * @returns Array of all matches.\n * @example\n * matchAll(\"Kitten\", /t/g)\n * // => [[0: \"t\"], [1: \"t\"]]\n *\n * matchAll(\"Kitten\", /f/g)\n * // => []\n */\nconst matchAll = (str, pattern) => {\n    const matches = [];\n    let match;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((match = pattern.exec(str))) {\n        matches.push(match);\n    }\n    return matches;\n};\n\n/**\n * Returns a new array with the item at the given index removed.\n *\n * @since 2.8.0\n * @memberOf Array\n * @param collection Collection to use.\n * @param targetIndex Index to remove.\n * @returns Collection with the index removed.\n * @example\n * removeIndex([\"foo\", \"bar\", \"fizz\"], 1)\n * // => [\"foo\", \"fizz\"]\n */\nconst removeIndex = (collection, targetIndex) => filter(collection, (value, index) => index !== targetIndex);\n\n/**\n * Returns a new collection with instances of the given item removed.\n *\n * @since 2.8.0\n * @memberOf Array\n * @param collection Collection to use.\n * @param targetValue Item to remove.\n * @param removeAll If all occurrences should be removed, otherwise just the first occurrence will.\n * @returns Collection with the item removed.\n * @example\n * removeItem([\"foo\", \"bar\", \"fizz\", \"bar\"], \"bar\")\n * // => [\"foo\", \"fizz\"]\n *\n * removeItem([\"foo\", \"bar\", \"fizz\", \"bar\"], \"bar\", false)\n * // => [\"foo\", \"fizz\", \"bar\"]\n */\nconst removeItem = (collection, targetValue, removeAll = true) => removeAll\n    ? filter(collection, value => value !== targetValue)\n    : removeIndex(collection, indexOf(collection, targetValue));\n\n/**\n * Returns a new collection with every n-th item from the input array.\n *\n * @since 1.0.0\n * @memberOf Array\n * @param collection Collection to use.\n * @param n Step to use.\n * @returns Stepped collection.\n * @example\n * step([1, 2, 3, 4, 5, 6], 2)\n * // => [1, 3, 5]\n */\nconst step = (collection, n) => filter(collection, (value, index) => index % n === 0);\n\n/**\n * Replaces every circular reference in an object with a value, defaulting to null.\n *\n * Can take a custom replacer function.\n *\n * @since 6.0.0\n * @memberOf Object\n * @param collection Object to decycle.\n * @param replacer Circular reference value replacer function\n * @param references WeakSet prefilled with encountered references, not recommended to provide this manually.\n * @returns Decycled object.\n * @example\n * const a = {a: {}, b: 1, c: 2};\n *\n * a.a = a;\n *\n * decycle(a)\n * // => {a: null, b: 1, c: 2}\n *\n * decycle(a, key => `_${key}`)\n * // => {a: \"_a\", b: 1, c: 2}\n */\nconst decycle = (collection, replacer = () => null, references = new WeakSet()) => {\n    // TODO: find a way to properly avoid any's here.\n    const decycler = (value, key, _collection) => {\n        if (references.has(value)) {\n            return replacer(value, key, _collection);\n        }\n        if (isObjectLike(value)) {\n            return decycle(value, replacer, references);\n        }\n        return value;\n    };\n    references.add(collection);\n    return isArrayLike(collection)\n        ? map(collection, decycler)\n        : mapValues(collection, decycler);\n};\n\n/**\n * Gets name of a value.\n *\n * If the value has a name or description property, the value of that is returned.\n * If the value is a string, it is returned as is.\n * Otherwise null is returned.\n *\n * @since 10.2.0\n * @memberOf Object\n * @param value Value to check.\n * @returns The name of the value.\n * @example\n * name(class Foo{})\n * // => \"Foo\"\n *\n * name(function bar(){})\n * // => \"bar\"\n *\n * name(Symbol(\"abc\"))\n * // => \"abc\"\n *\n * name(\"foo\")\n * // => \"foo\"\n *\n * name(1)\n * // => null\n */\nconst name = (value) => {\n    if (isString(value)) {\n        return value;\n    }\n    if (isObject(value) && isString(value.name)) {\n        return value.name;\n    }\n    if (isSymbol(value) && isString(value.description)) {\n        return value.description;\n    }\n    return null;\n};\n\n/**\n * Binary-search implementation.\n *\n * @since 5.0.0\n * @memberOf Search\n * @param arr Array to search in.\n * @param search Value to search.\n * @returns Index of the value in the array, or null if none is found.\n * @example\n * binarySearch([0, 1, 2], 1)\n * // => 1\n *\n * binarySearch([0, 1, 2], 100)\n * // => null\n */\nconst binarySearch = (arr, search) => {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid;\n    while (low <= high) {\n        mid = Math.floor(low + (high - low) / 2);\n        const current = arr[mid];\n        if (current === search) {\n            return mid;\n        }\n        if (current < search) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return null;\n};\n\n/**\n * @namespace Is\n */\nconst l_Is = {\n    isPromise,\n    isBlank\n};\n/**\n * @namespace Lang\n */\nconst l_Lang = {\n    toMap\n};\n/**\n * @namespace String\n */\nconst l_String = {\n    distance,\n    pascalCase,\n    similar,\n    matchAll\n};\n/**\n * @namespace Array\n */\nconst l_Array = {\n    removeIndex,\n    removeItem,\n    step,\n    groupMapBy,\n    groupMapReducingBy\n};\n/**\n * @namespace Object\n */\nconst l_Object = {\n    decycle,\n    name\n};\n/**\n * @namespace Search\n */\nconst l_Search = {\n    binarySearch\n};\n\nexport { binarySearch, decycle, distance, groupMapBy, groupMapReducingBy, isBlank, isPromise, l_Array, l_Is, l_Lang, l_Object, l_Search, l_String, matchAll, name, pascalCase, removeIndex, removeItem, similar, step, toMap };\n","import { similar } from \"lightdash\";\n/**\n * Gets similar keys of a key based on their string distance.\n *\n * @private\n * @param mapAliased Map to use for lookup.\n * @param name       Key to use.\n * @return List of similar keys.\n */\nconst getSimilar = (mapAliased, name) => similar(name, Array.from(mapAliased.keys()), false);\nexport { getSimilar };\n//# sourceMappingURL=commandUtil.js.map","var ResultType;\n(function (ResultType) {\n    ResultType[ResultType[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ResultType[ResultType[\"ERROR_NOT_FOUND\"] = 1] = \"ERROR_NOT_FOUND\";\n    ResultType[ResultType[\"ERROR_MISSING_ARGUMENT\"] = 2] = \"ERROR_MISSING_ARGUMENT\";\n})(ResultType || (ResultType = {}));\nexport { ResultType };\n//# sourceMappingURL=ILookupResult.js.map","import { isNil } from \"lodash\";\nimport { ArgumentMatcher } from \"../argument/ArgumentMatcher\";\nimport { Clingy } from \"../Clingy\";\nimport { getSimilar } from \"../command/util/commandUtil\";\nimport { clingyLogby } from \"../logger\";\nimport { ArgumentResolving } from \"./ArgumentResolving\";\nimport { CaseSensitivity } from \"./CaseSensitivity\";\nimport { ResultType } from \"./result/ILookupResult\";\n/**\n * Lookup tools for resolving paths through {@link CommandMap}s.\n *\n * @private\n */\nclass LookupResolver {\n    /**\n     * Creates a new {@link LookupResolver}.\n     *\n     * @param caseSensitive If the lookup should honor case.\n     */\n    constructor(caseSensitive = true) {\n        this.caseSensitivity = caseSensitive\n            ? CaseSensitivity.SENSITIVE\n            : CaseSensitivity.INSENSITIVE;\n    }\n    static createSuccessResult(pathNew, pathUsed, command, args) {\n        const lookupSuccess = {\n            successful: true,\n            pathUsed,\n            pathDangling: pathNew,\n            type: ResultType.SUCCESS,\n            command,\n            args\n        };\n        LookupResolver.logger.debug(\"Returning successful lookup result:\", lookupSuccess);\n        return lookupSuccess;\n    }\n    static createNotFoundResult(pathNew, pathUsed, currentPathFragment, commandMap) {\n        LookupResolver.logger.warn(`Command '${currentPathFragment}' could not be found.`);\n        return {\n            successful: false,\n            pathUsed,\n            pathDangling: pathNew,\n            type: ResultType.ERROR_NOT_FOUND,\n            missing: currentPathFragment,\n            similar: getSimilar(commandMap, currentPathFragment)\n        };\n    }\n    static createMissingArgsResult(pathNew, pathUsed, missing) {\n        LookupResolver.logger.warn(\"Some arguments could not be found:\", missing);\n        return {\n            successful: false,\n            pathUsed,\n            pathDangling: pathNew,\n            type: ResultType.ERROR_MISSING_ARGUMENT,\n            missing\n        };\n    }\n    /**\n     * Resolves a pathUsed through a {@link CommandMap}.\n     *\n     * @param commandMap        Map to use.\n     * @param path              Path to getPath.\n     * @param argumentResolving Strategy for resolving arguments.\n     * @return Lookup result, either {@link ILookupSuccess}, {@link ILookupErrorNotFound}\n     * or {@link ILookupErrorMissingArgs}.\n     */\n    resolve(commandMap, path, argumentResolving) {\n        if (path.length === 0) {\n            throw new Error(\"Path cannot be empty.\");\n        }\n        return this.resolveInternal(commandMap, path, [], argumentResolving);\n    }\n    resolveInternal(commandMap, path, pathUsed, argumentResolving) {\n        const currentPathFragment = path[0];\n        const pathNew = path.slice(1);\n        pathUsed.push(currentPathFragment);\n        if (!this.hasCommand(commandMap, currentPathFragment)) {\n            return LookupResolver.createNotFoundResult(pathNew, pathUsed, currentPathFragment, commandMap);\n        }\n        // We already checked if the key exists, assert its existence.\n        const command = (commandMap.getCommand(currentPathFragment, this.caseSensitivity));\n        LookupResolver.logger.debug(`Found command: '${currentPathFragment}'.`);\n        /*\n         * Recurse into sub-commands if:\n         * Additional items are in the path AND\n         * the current command has sub-commands AND\n         * the sub-commands contain the next path item.\n         */\n        if (pathNew.length > 0 &&\n            command.sub instanceof Clingy &&\n            this.hasCommand(command.sub.mapAliased, pathNew[0])) {\n            return this.resolveInternalSub(pathNew, pathUsed, command, argumentResolving);\n        }\n        /*\n         * Skip checking for arguments if:\n         * The parameter argumentResolving is set to ignore arguments OR\n         * the command has no arguments defined OR\n         * the command has an empty array defined as arguments.\n         */\n        let argumentsResolved;\n        if (argumentResolving === ArgumentResolving.IGNORE ||\n            isNil(command.args) ||\n            command.args.length === 0) {\n            LookupResolver.logger.debug(\"No arguments defined, using empty map.\");\n            argumentsResolved = new Map();\n        }\n        else {\n            LookupResolver.logger.debug(`Looking up arguments: '${pathNew}'.`);\n            const argumentMatcher = new ArgumentMatcher(command.args, pathNew);\n            if (argumentMatcher.missing.length > 0) {\n                return LookupResolver.createMissingArgsResult(pathNew, pathUsed, argumentMatcher.missing);\n            }\n            argumentsResolved = argumentMatcher.result;\n            LookupResolver.logger.debug(\"Successfully looked up arguments: \", argumentsResolved);\n        }\n        return LookupResolver.createSuccessResult(pathNew, pathUsed, command, argumentsResolved);\n    }\n    resolveInternalSub(pathNew, pathUsed, command, argumentResolving) {\n        LookupResolver.logger.debug(\"Resolving sub-commands:\", command.sub, pathNew);\n        return this.resolveInternal(command.sub.mapAliased, pathNew, pathUsed, argumentResolving);\n    }\n    hasCommand(commandMap, pathPart) {\n        return commandMap.hasCommand(pathPart, this.caseSensitivity);\n    }\n}\nLookupResolver.logger = clingyLogby.getLogger(LookupResolver);\nexport { LookupResolver };\n//# sourceMappingURL=LookupResolver.js.map","import { compact } from \"lodash\";\nimport { clingyLogby } from \"../logger\";\n/**\n * Manages parsing input strings into a path list.\n *\n * @private\n */\nclass InputParser {\n    // noinspection TsLint\n    /**\n     * Creates an {@link InputParser}.\n     *\n     * @param legalQuotes List of quotes to use when parsing strings.\n     */\n    constructor(legalQuotes = ['\"']) {\n        this.legalQuotes = legalQuotes;\n        this.pattern = this.generateMatcher();\n    }\n    /**\n     * Parses an input string.\n     *\n     * @param input Input string to parse.\n     * @return Path list.\n     */\n    parse(input) {\n        InputParser.logger.debug(`Parsing input '${input}'`);\n        const result = [];\n        const pattern = new RegExp(this.pattern);\n        let match;\n        // noinspection AssignmentResultUsedJS\n        while ((match = pattern.exec(input))) {\n            InputParser.logger.trace(`Found match '${match}'`);\n            const groups = compact(match.slice(1));\n            if (groups.length > 0) {\n                InputParser.logger.trace(`Found group '${groups[0]}'`);\n                result.push(groups[0]);\n            }\n        }\n        return result;\n    }\n    generateMatcher() {\n        InputParser.logger.debug(\"Creating matcher.\");\n        const matchBase = \"(\\\\S+)\";\n        const matchItems = this.legalQuotes\n            .map((str) => `\\\\${str}`)\n            .map(quote => `${quote}(.+?)${quote}`);\n        matchItems.push(matchBase);\n        let result;\n        try {\n            result = new RegExp(matchItems.join(\"|\"), \"g\");\n        }\n        catch (e) {\n            InputParser.logger.error(\"The parsing pattern is invalid, this should never happen.\", e);\n            throw e;\n        }\n        return result;\n    }\n}\nInputParser.logger = clingyLogby.getLogger(InputParser);\nexport { InputParser };\n//# sourceMappingURL=InputParser.js.map","import { CommandMap } from \"./command/CommandMap\";\nimport { clingyLogby } from \"./logger\";\nimport { ArgumentResolving } from \"./lookup/ArgumentResolving\";\nimport { LookupResolver } from \"./lookup/LookupResolver\";\nimport { InputParser } from \"./parser/InputParser\";\n/**\n * Core {@link Clingy} class, entry point for creation of a new instance.\n */\nclass Clingy {\n    /**\n     * Creates a new {@link Clingy} instance.\n     *\n     * @param commands      Map of commands to create the instance with.\n     * @param options       Option object.\n     */\n    constructor(commands = {}, options = {}) {\n        this.lookupResolver = new LookupResolver(options.caseSensitive);\n        this.inputParser = new InputParser(options.legalQuotes);\n        this.map = CommandMap.createWithOptions(commands, options);\n        this.mapAliased = new CommandMap();\n        this.updateAliases();\n    }\n    /**\n     * Sets a command on this instance.\n     *\n     * @param key Key of the command.\n     * @param command The command.\n     */\n    setCommand(key, command) {\n        this.map.set(key, command);\n        this.updateAliases();\n    }\n    // TODO replace .get() with .getCommand() (breaking)\n    /**\n     * Gets a command from this instance.\n     *\n     * @param key Key of the command.\n     */\n    getCommand(key) {\n        return this.mapAliased.get(key);\n    }\n    // noinspection JSUnusedGlobalSymbols\n    // TODO replace .has() with .hasCommand() (breaking)\n    /**\n     * Checks if a command on this instance exists for this key.\n     *\n     * @param key Key of the command.\n     */\n    hasCommand(key) {\n        return this.mapAliased.has(key);\n    }\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Checks if a pathUsed resolves to a command.\n     *\n     * @param path Path to look up.\n     * @return If the pathUsed resolves to a command.\n     */\n    hasPath(path) {\n        return this.getPath(path).successful;\n    }\n    /**\n     * Resolves a pathUsed to a command.\n     *\n     * @param path Path to look up.\n     * @return Lookup result, either {@link ILookupSuccess} or {@link ILookupErrorNotFound}.\n     */\n    getPath(path) {\n        Clingy.logger.debug(`Resolving pathUsed: ${path}`);\n        return this.lookupResolver.resolve(this.mapAliased, path, ArgumentResolving.IGNORE);\n    }\n    /**\n     * Parses a string into a command and arguments.\n     *\n     * @param input String to parse.\n     * @return Lookup result, either {@link ILookupSuccess}, {@link ILookupErrorNotFound}\n     * or {@link ILookupErrorMissingArgs}.\n     */\n    parse(input) {\n        Clingy.logger.debug(`Parsing input: '${input}'`);\n        return this.lookupResolver.resolve(this.mapAliased, this.inputParser.parse(input), ArgumentResolving.RESOLVE);\n    }\n    /**\n     * @private\n     */\n    updateAliases() {\n        Clingy.logger.debug(\"Updating aliased map.\");\n        this.mapAliased.clear();\n        this.map.forEach((value, key) => {\n            this.mapAliased.set(key, value);\n            value.alias.forEach(alias => {\n                if (this.mapAliased.has(alias)) {\n                    Clingy.logger.warn(`Alias '${alias}' conflicts with a previously defined key, will be ignored.`);\n                }\n                else {\n                    Clingy.logger.trace(`Created alias '${alias}' for '${key}'`);\n                    this.mapAliased.set(alias, value);\n                }\n            });\n        });\n        Clingy.logger.debug(\"Done updating aliased map.\");\n    }\n}\nClingy.logger = clingyLogby.getLogger(Clingy);\nexport { Clingy };\n//# sourceMappingURL=Clingy.js.map"],"names":["isMap","isPlainObject","forEach","isObject","isNil","concat","compact"],"mappings":"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CA;IACA;IACA;IACA,MAAM,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI,CAAC,CAAC;AAC5E,AA6BA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC;;IAEnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AACrE,AA8EA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClD,AAqMA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AACtD,AAgBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,YAAY,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;AAC/D,AA2EA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClD,AAgC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"}